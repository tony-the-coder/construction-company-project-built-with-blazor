@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using LehmanCustomConstruction.Components.Account.Shared
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using LehmanCustomConstruction.Data

@* --- Corrected Injections --- *@
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@* Removed duplicate/unused @inject lines below *@
@* @inject NavigationManager NavigationManager *@
@* @inject IdentityRedirectManager RedirectManager *@
@* --- End Corrected Injections --- *@

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-lg-6">
        @* Display specific errors from identityErrors if they exist *@
        @if (identityErrors is not null)
        {
            <div class="alert alert-danger" role="alert">
                @foreach (var error in identityErrors)
                {
                    <p>@error.Description</p>
                }
            </div>
        }

        <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            @* Keep ValidationSummary for field-level errors *@
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.Password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.ConfirmPassword">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-lg-4 col-lg-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            @* <ExternalLoginPicker ReturnUrl="@ReturnUrl" /> *@ @* Assuming you have this component if needed *@
        </section>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    // Inject standard NavigationManager using property injection
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    // Keep other injections from top level (UserManager, UserStore etc. are implicitly available)
    // Note: Services injected via @inject at the top are directly usable in the @code block.
    // Services injected via [Inject] property are also usable. Mixing is allowed,
    // but having the *same service* injected both ways causes the error. We keep the property injection.


    public async Task RegisterUser(EditContext editContext)
    {
        identityErrors = null; // Clear previous errors
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            Logger.LogWarning($"User creation failed for {Input.Email}: {string.Join(", ", result.Errors.Select(e => e.Description))}");
            StateHasChanged(); // Display errors
            return; // Stop execution on failure
        }

        // --- User Creation Succeeded ---
        Logger.LogInformation($"User '{Input.Email}' created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

        // Construct the confirmation URL using the injected NavigationManager property
        var confirmationLink = NavigationManager.GetUriWithQueryParameters( // Use the property here
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri, // Use the property here
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        Logger.LogInformation($"Confirmation email link generated (but likely not sent) for {Input.Email}. Callback: {confirmationLink}");

        try
        {
            await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(confirmationLink));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error attempting to 'send' confirmation email to {Input.Email}");
        }

        // --- Redirect using NavigationManager property ---
        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            Logger.LogInformation($"Redirecting '{Input.Email}' to RegisterConfirmation page using NavigationManager.");
            var registerConfirmationUri = NavigationManager.GetUriWithQueryParameters( // Use the property here
                "Account/RegisterConfirmation",
                new Dictionary<string, object?> { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });

            NavigationManager.NavigateTo(registerConfirmationUri); // Use the property here
        }
        else
        {
            await SignInManager.SignInAsync(user, isPersistent: false); // Still potential "Headers read-only" here
            Logger.LogInformation($"Signed in user '{Input.Email}' immediately after registration.");
            NavigationManager.NavigateTo(ReturnUrl ?? "/"); // Use the property here
        }
    }


    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.", ex);
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        if (UserStore is not IUserEmailStore<ApplicationUser> emailStore)
        {
            throw new NotSupportedException($"The injected IUserStore is not an {nameof(IUserEmailStore<ApplicationUser>)}.");
        }
        return emailStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}