@page "/Account/Login"
@rendermode InteractiveServer // Keep interactive for validation messages

@using System.ComponentModel.DataAnnotations
@using LehmanCustomConstruction.Components.Account.Shared
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using LehmanCustomConstruction.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-lg-6">
        <section>
            <StatusMessage Message="@errorMessage" />

            @* --- Outer form handles the actual POST submission --- *@
            <form method="post" @formname="login">
                @* --- Antiforgery Token is ESSENTIAL for POST security --- *@
                <AntiforgeryToken />

                @* --- Inner EditForm provides EditContext for VALIDATION ONLY --- *@
                @* --- It does NOT handle the submit action itself --- *@
                <EditForm Model="Input">
                    <DataAnnotationsValidator /> @* Validator now has an EditContext *@
                    <h2>Use a local account to log in.</h2>
                    <hr />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        @* Inputs need 'name' for POST binding AND @bind for Blazor state/validation *@
                        <InputText @bind-Value="Input.Email" name="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <label for="Input.Email" class="form-label">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" name="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <label for="Input.Password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="checkbox mb-3">
                        <label class="form-label">
                            <InputCheckbox @bind-Value="Input.RememberMe" name="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                            Remember me
                        </label>
                    </div>
                </EditForm> @* --- End of inner EditForm --- *@

                @* --- Submit button belongs to the OUTER form --- *@
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>

                @* --- Other links remain inside the outer form --- *@
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </form> @* --- End of outer form --- *@
        </section>
    </div>
    <div class="col-lg-4 col-lg-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            @* <ExternalLoginPicker @rendermode="InteractiveServer" /> *@
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [SupplyParameterFromForm] // Binds data from the POST request
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    // --- The OnPostAsync handler does the actual login ---
    public async Task OnPostAsync()
    {
        ReturnUrl ??= "~/";
        Logger.LogInformation("OnPostAsync attempting login for {Email}", Input.Email);
        errorMessage = null; // Clear previous errors

        // ModelState validation happens automatically based on InputModel attributes
        // But you might want to check explicitly if needed:
        // if (!ModelState.IsValid) { ... handle ... }

        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in via OnPostAsync.");
            RedirectManager.RedirectTo(ReturnUrl);
            return; // Prevent further rendering after redirect
        }
        if (result.RequiresTwoFactor)
        {
            Logger.LogInformation("Login requires two-factor authentication.");
            var queryParams = new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe };
            RedirectManager.RedirectTo("Account/LoginWith2fa", queryParams);
            return; // Prevent further rendering
        }
        if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
            return; // Prevent further rendering
        }
        else
        {
            Logger.LogWarning("Invalid login attempt for {Email}.", Input.Email);
            errorMessage = "Error: Invalid login attempt.";
            // Let the component re-render to show the errorMessage
        }
        // StateHasChanged() is usually not needed here as the component lifecycle handles it
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    // Keep lifecycle methods if needed for logging/other setup
    protected override void OnInitialized() { /* ... */ base.OnInitialized(); }
    protected override void OnParametersSet() { /* ... */ base.OnParametersSet(); }
    protected override async Task OnAfterRenderAsync(bool firstRender) { /* ... */ await base.OnAfterRenderAsync(firstRender); }
}