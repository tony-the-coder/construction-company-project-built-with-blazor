@page "/Account/Login"
@* No top-level @rendermode needed for static POST *@
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers // Add Tag Helper directive

@using System.ComponentModel.DataAnnotations
@using LehmanCustomConstruction.Components.Account.Shared // Keep for StatusMessage if needed
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using LehmanCustomConstruction.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@* inject IdentityRedirectManager RedirectManager -- Removed temporarily to avoid static rendering error conflicts *@

@* This component now acts more like a Razor Page for form handling *@
@model LoginModel // Explicitly declare the model class for Tag Helpers

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-lg-6">
        <section>
            @* StatusMessage might not update dynamically without interactive mode *@
            @* Using TempData is more reliable for POST redirects *@
            <StatusMessage Message="@Model.StatusMessage" />

            @* --- Use standard form POST --- *@
            <form id="account" method="post"> @* Ensure `id` is unique if needed, method=post is key *@
                @* --- Antiforgery Token is ESSENTIAL --- *@
                @Html.AntiForgeryToken()

                <h2>Use a local account to log in.</h2>
                <hr />
                @* --- Standard validation summary using Tag Helper --- *@
                <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>

                <div class="form-floating mb-3">
                    @* --- Standard input Tag Helper bound to Model.Input --- *@
                    <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label asp-for="Input.Email" class="form-label">Email</label>
                    @* --- Standard validation Tag Helper --- *@
                    <span asp-validation-for="Input.Email" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="Input.Password" type="password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label asp-for="Input.Password" class="form-label">Password</label>
                    <span asp-validation-for="Input.Password" class="text-danger"></span>
                </div>
                <div class="checkbox mb-3">
                    <label asp-for="Input.RememberMe" class="form-label">
                        <input asp-for="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        @Html.DisplayNameFor(m => m.Input.RememberMe)
                    </label>
                </div>

                <div>
                    <button id="login-submit" type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p><a href="/Account/ForgotPassword">Forgot your password?</a></p>
                    <p><a href="@Url.Page("./Register", new { ReturnUrl = Model.ReturnUrl })">Register as a new user</a></p>
                    <p><a href="/Account/ResendEmailConfirmation">Resend email confirmation</a></p>
                </div>
            </form> @* --- End of form --- *@
        </section>
    </div>
    <div class="col-lg-4 col-lg-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            @* External logins would need separate handling *@
        </section>
    </div>
</div>

@functions { // Changed @code to @functions for Razor Pages-like structure

    // --- Model class to hold page properties and InputModel ---
    // --- This replaces the @code block fields ---
    public class LoginModel : Microsoft.AspNetCore.Mvc.RazorPages.PageModel // Inherit from PageModel
    {
        private readonly SignInManager<ApplicationUser> _signInManager;
        private readonly ILogger<LoginModel> _logger; // Use ILogger<LoginModel>

        public LoginModel(SignInManager<ApplicationUser> signInManager, ILogger<LoginModel> logger)
        {
            _signInManager = signInManager;
            _logger = logger;
        }

        [BindProperty] // Binds InputModel from form post
        public InputModel Input { get; set; } = new();

        // Holds external logins if you implement them
        // public IList<AuthenticationScheme> ExternalLogins { get; set; } = new List<AuthenticationScheme>();

        [BindProperty(SupportsGet = true)] // Get returnUrl from query string
        public string? ReturnUrl { get; set; }

        [TempData]
        public string? StatusMessage { get; set; }

        // InputModel definition is nested or separate
        public sealed class InputModel
        {
            [Required]
            [EmailAddress]
            public string Email { get; set; } = "";

            [Required]
            [DataType(DataType.Password)]
            public string Password { get; set; } = "";

            [Display(Name = "Remember me?")]
            public bool RememberMe { get; set; }
        }

        public async Task OnGetAsync(string? returnUrl = null)
        {
             if (!string.IsNullOrEmpty(StatusMessage))
             {
                 ModelState.AddModelError(string.Empty, StatusMessage);
             }
            ReturnUrl = returnUrl;
            // Optional: Load external logins here if needed
            // ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
            await Task.CompletedTask; // Placeholder if no async needed in GET
        }


        // --- OnPostAsync handles the server-side POST request ---
        public async Task<IActionResult> OnPostAsync(string? returnUrl = null)
        {
            ReturnUrl = returnUrl ?? Url.Content("~/"); // Use Url.Content for root

            // Optional: Handle external logins postback here if needed
            // ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();

            if (ModelState.IsValid) // Check ModelState populated by Tag Helpers/Binding
            {
                _logger.LogInformation("OnPostAsync attempting login for {Email}", Input.Email);
                var result = await _signInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

                if (result.Succeeded)
                {
                    _logger.LogInformation("User logged in.");
                    return LocalRedirect(ReturnUrl); // Standard redirect
                }
                if (result.RequiresTwoFactor)
                {
                    _logger.LogInformation("Login requires two-factor.");
                    return RedirectToPage("./LoginWith2fa", new { ReturnUrl = ReturnUrl, RememberMe = Input.RememberMe });
                }
                if (result.IsLockedOut)
                {
                    _logger.LogWarning("User account locked out.");
                    return RedirectToPage("./Lockout");
                }
                else
                {
                    _logger.LogWarning("Invalid login attempt for {Email}.", Input.Email);
                    ModelState.AddModelError(string.Empty, "Invalid login attempt.");
                    StatusMessage = "Error: Invalid login attempt."; // Set TempData
                    return Page(); // Return Page to show errors bound to ModelState
                }
            }

            // If we got this far, something failed (ModelState invalid)
            StatusMessage = "Invalid input.";
            _logger.LogWarning("Login POST failed model validation for {Email}", Input?.Email ?? "unknown");
            return Page(); // Return Page to show errors
        }
    }
}