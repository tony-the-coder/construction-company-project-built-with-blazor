@page "/Account/Login"
@rendermode InteractiveServer // Interactive required for EditForm events

@using System.ComponentModel.DataAnnotations
@using LehmanCustomConstruction.Components.Account.Shared // Assuming StatusMessage is here
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using LehmanCustomConstruction.Data // Needed for ApplicationUser

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <h1 class="text-center mb-4">Log in</h1>

            <section>
                <StatusMessage Message="@errorMessage" />

                @* --- Use EditForm with OnValidSubmit --- *@
                @* No method="post", No @formname needed here *@
                <EditForm Model="Input" OnValidSubmit="HandleValidLogin" FormName="loginEditForm" Enhance>
                    <DataAnnotationsValidator />
                    <h2 class="h5">Use a local account to log in.</h2>
                    <hr />
                    <ValidationSummary class="text-danger mb-3" role="alert" />

                    <div class="form-floating mb-3">
                        @* Input components require @bind inside EditForm *@
                        <InputText @bind-Value="Input.Email" id="email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <label for="email" class="form-label">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" id="password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <label for="password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>

                    <div class="checkbox mb-3">
                        <label for="rememberme" class="form-label">
                            <InputCheckbox @bind-Value="Input.RememberMe" id="rememberme" class="darker-border-checkbox form-check-input" />
                            Remember me
                        </label>
                    </div>

                    @* Submit button for the EditForm *@
                    <div class="mb-3">
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                    </div>

                    @* Other links (can be inside or outside EditForm) *@
                    <div class="text-center">
                        <p><a href="Account/ForgotPassword">Forgot your password?</a></p>
                        <p><a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a></p>
                        <p><a href="Account/ResendEmailConfirmation">Resend email confirmation</a></p>
                    </div>

                </EditForm> @* End EditForm *@
            </section>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    // Model is bound via @bind, no [SupplyParameterFromForm] needed
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    // Handler triggered by OnValidSubmit
    private async Task HandleValidLogin()
    {
        ReturnUrl ??= "~/";
        errorMessage = null;
        Logger.LogInformation("Login attempt started for {Email} via EditForm/OnValidSubmit", Input.Email);

        // Input model is already populated thanks to @bind
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User '{Email}' logged in successfully.", Input.Email);
            // IMPORTANT: RedirectManager may not work reliably after an EditForm submit
            //            handled purely by Blazor events. Use NavigationManager.
            // RedirectManager.RedirectTo(ReturnUrl); // Less reliable here
            NavigationManager.NavigateTo(ReturnUrl, forceLoad: true); // Force reload often needed after login
            return;
        }
        if (result.RequiresTwoFactor)
        {
            Logger.LogInformation("Login for '{Email}' requires two-factor authentication.", Input.Email);
            var uri = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/LoginWith2fa").AbsoluteUri,
                new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
            NavigationManager.NavigateTo(uri, forceLoad: true); // Force load
            return;
        }
        if (result.IsLockedOut)
        {
            Logger.LogWarning("User account '{Email}' is locked out.", Input.Email);
            NavigationManager.NavigateTo("Account/Lockout", forceLoad: true); // Force load
            return;
        }
        else
        {
            Logger.LogWarning("Invalid login attempt for {Email}. SignInResult: {ResultStatus}", Input.Email, result.ToString());
            if (result.IsNotAllowed)
            {
                var user = await UserManager.FindByEmailAsync(Input.Email);
                if (user != null && !await UserManager.IsEmailConfirmedAsync(user))
                {
                    Logger.LogWarning("Login failed for '{Email}': Email not confirmed.", Input.Email);
                    errorMessage = "Error: Your email address needs to be confirmed. Check your inbox or resend confirmation.";
                }
                else
                {
                    Logger.LogWarning("Login failed for '{Email}': Login is not allowed.", Input.Email);
                    errorMessage = "Error: Login is not allowed for this account at this time.";
                }
            }
            else
            {
                errorMessage = "Error: Invalid email or password.";
            }
            // StateHasChanged() is usually not required after await in handler
            // because the component re-renders, but can be added if UI doesn't update.
            StateHasChanged();
        }
    }

    // InputModel remains the same
    private sealed class InputModel
    {
        [Required(ErrorMessage = "The Email field is required.")]
        [EmailAddress(ErrorMessage = "The Email field is not a valid e-mail address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "The Password field is required.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}