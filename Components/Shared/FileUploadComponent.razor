@* File: Components/Shared/FileUploadComponent.razor *@

@inject ILogger<FileUploadComponent> Logger
@inject IConfiguration Configuration
@inject ApplicationDbContext DbContext
@inject NotificationService NotificationService

@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Security
@using Microsoft.AspNetCore.Components.Forms
@using LehmanCustomConstruction.Data.Common // For CustomerDocument

@* --- Upload Section --- *@
<div class="bg-white dark:bg-gray-800 border border-subtle dark:border-gray-700 rounded-lg shadow-sm p-6 @CssClass">
    <h4 class="text-xl font-semibold text-primary dark:text-gray-100 mb-4 font-serif">@Title</h4>

    @* Upload Result Message *@
    @if (!string.IsNullOrEmpty(_userFeedbackMessage))
    {
        <div class="@(_feedbackSuccess ? "bg-green-100 border border-green-400 text-green-700 dark:bg-green-900/50 dark:border-green-600 dark:text-green-300" : "bg-red-100 border border-red-400 text-red-700 dark:bg-red-900/50 dark:border-red-600 dark:text-red-300") px-4 py-3 rounded relative mb-4" role="alert">
            <span class="block sm:inline">@((MarkupString)_userFeedbackMessage)</span>
        </div>
    }

    @if (IsInDemoMode)
    {
        <p class="text-orange-600 dark:text-orange-400 mb-4"><em>Note: Running in demo mode without login. Uploads will be associated with demo user.</em></p>
    }

    <EditForm Model="_uploadModel" OnValidSubmit="HandleFileUpload">
        <DataAnnotationsValidator />

        @* File Input *@
        <div class="mb-4">
            <label for="@($"documentFile-{_componentId}")" class="block text-sm font-medium text-primary dark:text-gray-300 mb-1">Select File(s)</label>
            <InputFile id="@($"documentFile-{_componentId}")" OnChange="HandleFileSelected" class="block w-full text-sm text-gray-500 dark:text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-accent/10 dark:file:bg-accent/20 file:text-accent dark:file:text-accent/90 hover:file:bg-accent/20 dark:hover:file:bg-accent/30" accept="@string.Join(",", _allowedExtensions)" multiple="@AllowMultipleFiles" />
            <ValidationMessage For="@(() => _uploadModel.FilesToUpload)" class="text-red-600 dark:text-red-400 text-xs mt-1" />
            @if (_isFileLoading)
            {
                <p class="text-sm text-blue-600 dark:text-blue-400 mt-1">Processing...</p>
            }
            else if (!AllowMultipleFiles && _uploadModel.FileToUpload != null)
            {
                <p class="mt-1 text-xs text-secondary dark:text-gray-400">Selected: @_uploadModel.FileToUpload.Name (@FormatFileSize(_uploadModel.FileToUpload.Size))</p>
            }
            else if (AllowMultipleFiles && _uploadModel.FilesToUpload.Any())
            {
                <p class="mt-1 text-xs text-secondary dark:text-gray-400">Selected: @_uploadModel.FilesToUpload.Count file(s)</p>
            }
            else
            {
                <p class="mt-1 text-xs text-secondary dark:text-gray-400">Max size: @(_maxFileSize / (1024 * 1024)) MB. Max files: @MaxNumberOfFiles. Allowed: @string.Join(", ", _allowedExtensions.Select(ext => ext.ToUpperInvariant()))</p>
            }
        </div>

        @* Description Input *@
        @if (AllowDescription)
        {
            <div class="mb-4">
                <label for="@($"description-{_componentId}")" class="block text-sm font-medium text-primary dark:text-gray-300 mb-1">Description (Optional)</label>
                <InputText id="@($"description-{_componentId}")" @bind-Value="_uploadModel.Description" class="block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-accent focus:ring-accent sm:text-sm bg-white dark:bg-gray-700 text-primary dark:text-gray-100 placeholder-gray-400 dark:placeholder-gray-500" placeholder="E.g., Renovation Plans v1" />
                <ValidationMessage For="@(() => _uploadModel.Description)" class="text-red-600 dark:text-red-400 text-xs mt-1" />
            </div>
        }

        @* Submit Button *@
        <button type="submit" class="inline-flex items-center px-4 py-2 bg-accent border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800 focus:ring-accent disabled:opacity-50 disabled:cursor-not-allowed"
                disabled="@(!_uploadModel.HasFiles(AllowMultipleFiles) || _isFileLoading || _isUploading || string.IsNullOrEmpty(TargetUserId) || string.IsNullOrEmpty(UploaderUserId))">
            @if (_isUploading)
            {
                <span><svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Uploading...</span>
            }
            else
            {
                <span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5 -ml-1 mr-2 inline"><path fill-rule="evenodd" d="M10 3.75a.75.75 0 0 1 .75.75v6.19l1.72-1.72a.75.75 0 1 1 1.06 1.06l-3 3a.75.75 0 0 1-1.06 0l-3-3a.75.75 0 1 1 1.06-1.06l1.72 1.72V4.5a.75.75 0 0 1 .75-.75Z" clip-rule="evenodd" /><path fill-rule="evenodd" d="M5.5 17a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5Z" clip-rule="evenodd" /></svg>@UploadButtonText</span>
            }
        </button>
    </EditForm>
</div>

@code {
    // --- Parameters ---
    [Parameter] public string TargetUserId { get; set; } = string.Empty;
    [Parameter] public string UploaderUserId { get; set; } = string.Empty;
    [Parameter] public string Title { get; set; } = "Upload New Document";
    [Parameter] public string UploadButtonText { get; set; } = "Upload Document";
    [Parameter] public bool AllowDescription { get; set; } = true;
    [Parameter] public bool AllowMultipleFiles { get; set; } = false;
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public bool IsInDemoMode { get; set; } = false;
    [Parameter] public int MaxNumberOfFiles { get; set; } = 15; // Default limit

    // --- Event Callbacks ---
    [Parameter] public EventCallback<List<CustomerDocument>> OnUploadComplete { get; set; }
    [Parameter] public EventCallback<string> OnUploadError { get; set; }

    // --- Internal State ---
    private UploadModel _uploadModel = new();
    private bool _isFileLoading = false;
    private bool _isUploading = false;
    private string? _userFeedbackMessage;
    private bool _feedbackSuccess;
    private readonly string _componentId = Guid.NewGuid().ToString("N");

    // --- Config ---
    private long _maxFileSize;
    private string _baseUploadDirectory = string.Empty;
    private readonly HashSet<string> _allowedExtensions = new(StringComparer.OrdinalIgnoreCase) { ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".txt", ".csv", ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tif", ".tiff", ".webp" };

    // --- ViewModel ---
    private class UploadModel
    {
        [Required(ErrorMessage = "Please select at least one file.")]
        [MinLength(1, ErrorMessage = "Please select at least one file.")]
        public List<IBrowserFile> FilesToUpload { get; set; } = new();
        public IBrowserFile? FileToUpload { get; set; }
        [StringLength(500)] public string? Description { get; set; }
        public bool HasFiles(bool allowMultiple) => allowMultiple ? FilesToUpload.Any() : FileToUpload != null;
    }

    // --- Methods ---
    protected override void OnInitialized()
    {
        _maxFileSize = Configuration.GetValue<long>("FileUploadSettings:MaxFileSizeMB", 20) * 1024 * 1024;
        _baseUploadDirectory = Configuration["FileUploadSettings:BasePath"] ?? "";
        if (string.IsNullOrWhiteSpace(_baseUploadDirectory) || !Path.IsPathRooted(_baseUploadDirectory)) { Logger.LogError("BasePath '{Path}' invalid.", _baseUploadDirectory); _baseUploadDirectory = ""; }
        else { Logger.LogInformation("FileUploadComponent Initialized. Base Path: {Path}", _baseUploadDirectory); }
    }

    // --- CORRECTED HandleFileSelected with Notification ---
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        _isFileLoading = true;
        _userFeedbackMessage = null;
        _uploadModel.FileToUpload = null; // Reset single file mode if used before
        _uploadModel.FilesToUpload.Clear();
        _feedbackSuccess = false;
        await InvokeAsync(StateHasChanged);

        List<IBrowserFile> selectedFiles = new();
        List<IBrowserFile> validFiles = new();

        try
        {
            // Read up to MaxNumberOfFiles + 1 to detect if limit was exceeded
            selectedFiles.AddRange(e.GetMultipleFiles(MaxNumberOfFiles + 1));

            // --- Check OUR file count limit FIRST ---
            if (AllowMultipleFiles && selectedFiles.Count > MaxNumberOfFiles)
            {
                _userFeedbackMessage = $"Error: Cannot select more than {MaxNumberOfFiles} files at once. You selected {selectedFiles.Count}.";
                _feedbackSuccess = false;
                // <<< ADDED NOTIFICATION HERE >>>
                NotificationService.Notify(NotificationSeverity.Error, "Too Many Files Selected", $"You can only upload a maximum of {MaxNumberOfFiles} files at a time.", 7000); // Show for 7 seconds
                selectedFiles.Clear(); // Don't process any files
            }
            else if (!selectedFiles.Any()) // Check if any file was selected
            {
                _userFeedbackMessage = "No file selected.";
                _feedbackSuccess = false;
            }
            // --- END file count limit check ---

            // --- Process selected files IF any exist AND within limit ---
            if (selectedFiles.Any())
            {
                foreach (var file in selectedFiles)
                {
                    // Validate individual files (size, extension)
                    if (ValidateFile(file))
                    {
                        validFiles.Add(file);
                    }
                    else
                    {
                        // Notify about invalid individual file
                        NotificationService.Notify(NotificationSeverity.Warning, "Invalid File", $"{file.Name}: {_userFeedbackMessage}", 5000);
                    }
                }

                // Assign valid files to the model
                if (AllowMultipleFiles) { _uploadModel.FilesToUpload = validFiles; }
                else { _uploadModel.FileToUpload = validFiles.FirstOrDefault(); } // Assign first valid file if single mode

                // Update feedback based on whether any valid files remain
                if (!validFiles.Any() && selectedFiles.Any()) { _userFeedbackMessage = "No valid files selected after validation."; _feedbackSuccess = false; }
                else if (validFiles.Any()) { _userFeedbackMessage = null; } // Clear error if at least one is valid
            }
            // --- END file processing ---
        }
        catch (InvalidOperationException ioEx) when (ioEx.Message.Contains("maximum number of files")) // Catch the specific InputFile limit exception
        {
            Logger.LogWarning(ioEx, "InputFile internal limit exceeded.");
            _userFeedbackMessage = $"Error: Too many files selected. Please select {MaxNumberOfFiles} or fewer."; // Use our limit in the message
            _feedbackSuccess = false;
            // <<< ADDED NOTIFICATION HERE >>>
            NotificationService.Notify(NotificationSeverity.Error, "Too Many Files", _userFeedbackMessage, 7000);
            // Ensure lists are cleared
            _uploadModel.FilesToUpload.Clear();
            _uploadModel.FileToUpload = null;
        }
        catch (Exception ex) // Catch other potential errors
        {
            Logger.LogError(ex, "Error processing selected files.");
            _userFeedbackMessage = $"Error selecting files: {ex.Message}";
            _feedbackSuccess = false;
            NotificationService.Notify(NotificationSeverity.Error, "Selection Error", "An unexpected error occurred while selecting files.", 7000);
            _uploadModel.FilesToUpload.Clear();
            _uploadModel.FileToUpload = null;
        }
        finally
        {
            _isFileLoading = false; await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleFileUpload()
    {
        if (!_uploadModel.HasFiles(AllowMultipleFiles)) { /*...*/ return; }
        if (_isFileLoading || _isUploading) return;
        if (string.IsNullOrEmpty(TargetUserId) || string.IsNullOrEmpty(UploaderUserId)) { /*...*/ return; }
        if (string.IsNullOrEmpty(_baseUploadDirectory)) { /*...*/ await OnUploadError.InvokeAsync("Upload config error."); return; }

        _isUploading = true; _userFeedbackMessage = null;
        await InvokeAsync(StateHasChanged);

        List<IBrowserFile> filesToProcess = AllowMultipleFiles ? _uploadModel.FilesToUpload : new List<IBrowserFile> { _uploadModel.FileToUpload! };
        List<CustomerDocument> savedDocs = new(); bool anyError = false; string? collectiveDescription = AllowDescription ? _uploadModel.Description?.Trim() : null;

        foreach (var file in filesToProcess)
        {
            long currentFileSize = 0; try { currentFileSize = file.Size; } catch (Exception ex) { Logger.LogError(ex, "Size error for {FileName}", file.Name); anyError = true; NotificationService.Notify(NotificationSeverity.Error, $"File Error: {file.Name}", "Could not read size."); continue; }
            if (!ValidateFile(file, currentFileSize)) { anyError = true; continue; }
            string userDirectory = Path.Combine(_baseUploadDirectory, TargetUserId); string safeOriginalFileName = Path.GetFileName(file.Name); string uniqueFileName = $"{Guid.NewGuid()}{Path.GetExtension(safeOriginalFileName)}"; string filePath = Path.Combine(userDirectory, uniqueFileName); string? savedFilePath = null;
            try { Directory.CreateDirectory(userDirectory); var fullDirectoryPath = Path.GetFullPath(userDirectory); var fullFilePath = Path.GetFullPath(filePath); if (!fullFilePath.StartsWith(fullDirectoryPath, StringComparison.OrdinalIgnoreCase)) { throw new SecurityException($"Path error for {safeOriginalFileName}."); } Logger.LogInformation("Saving '{Original}' ({Size})...", safeOriginalFileName, currentFileSize); await using FileStream fs = new(filePath, FileMode.Create); using var stream = file.OpenReadStream(_maxFileSize); await stream.CopyToAsync(fs); savedFilePath = filePath; Logger.LogInformation("Saved: {Path}", filePath); var document = new CustomerDocument { OriginalFileName = safeOriginalFileName, StoredFileName = uniqueFileName, ContentType = file.ContentType ?? "application/octet-stream", FileSize = currentFileSize, UploadTimestamp = DateTime.UtcNow, Description = collectiveDescription, UploadedById = UploaderUserId, TargetUserId = TargetUserId, IsDeleted = false }; DbContext.CustomerDocuments.Add(document); await DbContext.SaveChangesAsync(); Logger.LogInformation("DB record created ID: {DocId}", document.Id); savedDocs.Add(document); }
            catch (Exception ex) { anyError = true; Logger.LogError(ex, "Error uploading file '{Original}'", safeOriginalFileName); _userFeedbackMessage = $"Error uploading {safeOriginalFileName}: {ex.Message}"; NotificationService.Notify(NotificationSeverity.Error, $"Upload Error: {safeOriginalFileName}", ex.Message); TryDeleteFile(savedFilePath); }
        } // End foreach

        _isUploading = false; var descBeforeReset = _uploadModel.Description; _uploadModel = new(); _uploadModel.Description = descBeforeReset;
        if (savedDocs.Any() && !anyError) { _userFeedbackMessage = $"{savedDocs.Count} file(s) uploaded successfully."; _feedbackSuccess = true; NotificationService.Notify(NotificationSeverity.Success, "Upload Complete", _userFeedbackMessage); await OnUploadComplete.InvokeAsync(savedDocs); }
        else if (savedDocs.Any() && anyError) { _userFeedbackMessage = $"Partial success: {savedDocs.Count} uploaded, but some failed."; _feedbackSuccess = false; NotificationService.Notify(NotificationSeverity.Warning, "Partial Upload", _userFeedbackMessage); await OnUploadComplete.InvokeAsync(savedDocs); }
        else if (anyError) { await OnUploadError.InvokeAsync(_userFeedbackMessage ?? "An unknown upload error occurred."); }
        else { _userFeedbackMessage ??= "No valid files were selected to upload."; _feedbackSuccess = false; }
        await InvokeAsync(StateHasChanged);
    }


    private bool ValidateFile(IBrowserFile file, long fileSize) { if (file == null) { _userFeedbackMessage = "No file selected."; _feedbackSuccess = false; return false; } if (fileSize == 0) { _userFeedbackMessage = $"Cannot upload empty file: {file.Name}."; _feedbackSuccess = false; return false; } if (fileSize > _maxFileSize) { _userFeedbackMessage = $"File {file.Name} exceeds size limit ({FormatFileSize(_maxFileSize)})."; _feedbackSuccess = false; return false; } var fileExtension = Path.GetExtension(file.Name); if (string.IsNullOrEmpty(fileExtension) || !_allowedExtensions.Contains(fileExtension)) { _userFeedbackMessage = $"Invalid file type: {file.Name}. Allowed: {string.Join(", ", _allowedExtensions.Select(ext => ext.ToUpperInvariant()))}"; _feedbackSuccess = false; return false; } _userFeedbackMessage = null; return true; }
    private bool ValidateFile(IBrowserFile file) { long size = 0; try { size = file.Size; } catch { } if (file == null) { _userFeedbackMessage = "No file selected."; _feedbackSuccess = false; return false; } var fileExtension = Path.GetExtension(file.Name); if (string.IsNullOrEmpty(fileExtension) || !_allowedExtensions.Contains(fileExtension)) { _userFeedbackMessage = $"Invalid file type: {file.Name}. Allowed: {string.Join(", ", _allowedExtensions.Select(ext => ext.ToUpperInvariant()))}"; _feedbackSuccess = false; return false; } if (size > 0 && size > _maxFileSize) { _userFeedbackMessage = $"File {file.Name} exceeds size limit ({FormatFileSize(_maxFileSize)})."; _feedbackSuccess = false; return false; } _userFeedbackMessage = null; return true; }
    private void TryDeleteFile(string? filePath) { if (filePath != null && File.Exists(filePath)) { try { File.Delete(filePath); Logger.LogWarning("Cleaned up file '{FilePath}' due to upload error.", filePath); } catch (Exception delEx) { Logger.LogError(delEx, "Failed to clean up file '{FilePath}' after upload error.", filePath); } } }
    private string FormatFileSize(long bytes) { const long k = 1024, m = k * k, g = m * k; if (bytes < 0) return "?"; if (bytes == 0) return "0 B"; if (bytes < k) return $"{bytes} B"; if (bytes < m) return $"{(double)bytes / k:F1} KB"; if (bytes < g) return $"{(double)bytes / m:F1} MB"; return $"{(double)bytes / g:F1} GB"; }
}