@page "/portal/test"
@inject ILogger<Test> Logger
@inject IConfiguration Configuration

@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using System.ComponentModel.DataAnnotations

<PageTitle>Test File Upload</PageTitle>

<div class="container mt-4">
    <div class="card shadow border">
        <div class="card-header bg-secondary bg-gradient ml-0 py-3">
            <h3 class="text-white text-center">Basic File Upload</h3>
        </div>
        <div class="card-body p-4">

            @if (!string.IsNullOrEmpty(_statusMessage))
            {
                <div class="alert @(_isSuccess ? "alert-success" : "alert-danger")" role="alert">
                    @_statusMessage
                </div>
            }

            <EditForm Model="_uploadModel" OnValidSubmit="HandleFileUpload" FormName="TestUploadForm">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label for="testFile" class="form-label">Select File to Upload:</label>
                    <InputFile id="testFile" OnChange="HandleFileSelected" class="form-control" />
                    <ValidationMessage For="@(() => _uploadModel.FileToUpload)" />

                    @if (_isFileLoading)
                    {
                        <div class="text-info mt-2">Processing file selection...</div>
                    }
                    @if (_selectedFileName != null)
                    {
                        <div class="text-muted mt-2">Selected: @_selectedFileName (@FormatFileSize(_selectedFileSize))</div>
                    }
                </div>

                <div class="mt-3">
                    <button type="submit" style="background-color: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px;" disabled="@(_uploadModel.FileToUpload == null)">
                        Upload File
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private UploadModel _uploadModel = new();
    private bool IsProcessing { get; set; } = false;
    private bool _isFileLoading = false;
    private string? _statusMessage;
    private bool _isSuccess;
    private string? _selectedFileName;
    private long _selectedFileSize;

    // Updated directory for storing files
    private readonly string _uploadDirectory = @"C:\Users\tonyt\Desktop\Development\LehmanConstructionUploads";
    private readonly long _maxFileSize = 20 * 1024 * 1024; // 20 MB

    private class UploadModel
    {
        [Required(ErrorMessage = "Please select a file.")]
        public IBrowserFile? FileToUpload { get; set; }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        IsProcessing = true;
        _isFileLoading = true;
        _statusMessage = null;
        _uploadModel.FileToUpload = null;
        _selectedFileName = null;
        _selectedFileSize = 0;
        StateHasChanged();

        try
        {
            if (e.File != null)
            {
                _uploadModel.FileToUpload = e.File;
                _selectedFileName = e.File.Name;
                _selectedFileSize = e.File.Size;
                Logger.LogInformation("File selected: {FileName}, Size: {FileSize}", _selectedFileName, _selectedFileSize);
            }
            else
            {
                Logger.LogWarning("File selection returned null file.");
                _statusMessage = "File selection failed or was cancelled.";
                _isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during file selection.");
            _statusMessage = $"Error selecting file: {ex.Message}";
            _isSuccess = false;
        }
        finally
        {
            _isFileLoading = false;
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task HandleFileUpload()
    {
        if (_uploadModel.FileToUpload == null)
        {
            _statusMessage = "Error: No file is selected for upload.";
            _isSuccess = false;
            Logger.LogWarning("HandleFileUpload called but FileToUpload is null.");
            return;
        }

        IsProcessing = true;
        _statusMessage = null;
        StateHasChanged();

        try
        {
            // Ensure the upload directory exists
            if (!Directory.Exists(_uploadDirectory))
            {
                Directory.CreateDirectory(_uploadDirectory);
            }

            // Generate a unique file name and save the file
            string uniqueFileName = $"{Guid.NewGuid()}{Path.GetExtension(_uploadModel.FileToUpload.Name)}";
            string filePath = Path.Combine(_uploadDirectory, uniqueFileName);

            await using FileStream fs = new(filePath, FileMode.Create);
            await _uploadModel.FileToUpload.OpenReadStream(_maxFileSize).CopyToAsync(fs);

            _statusMessage = $"File '{_uploadModel.FileToUpload.Name}' uploaded successfully to '{filePath}'.";
            _isSuccess = true;
            Logger.LogInformation("File uploaded successfully: {FilePath}", filePath);

            // Clear the form
            _uploadModel = new();
            _selectedFileName = null;
            _selectedFileSize = 0;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during file upload.");
            _statusMessage = $"Error uploading file: {ex.Message}";
            _isSuccess = false;
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private string FormatFileSize(long bytes)
    {
        const long kilobyte = 1024;
        const long megabyte = kilobyte * 1024;
        if (bytes < kilobyte) return $"{bytes} B";
        if (bytes < megabyte) return $"{(double)bytes / kilobyte:F1} KB";
        return $"{(double)bytes / megabyte:F1} MB";
    }
}

