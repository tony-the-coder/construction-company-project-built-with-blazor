@* File: Components/Pages/Portal/DocumentsPage.razor *@
@page "/portal/documents"
@layout PortalLayout
@rendermode InteractiveServer

@* --- AUTHORIZATION TEMPORARILY DISABLED FOR DEMO --- *@
@* @attribute [Authorize] *@
@* --- REMEMBER TO RE-ENABLE AUTHORIZATION AFTER DEMO --- *@

@* Using Statements *@
@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Security
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Logging
@using Radzen // For NotificationService etc.
@using Radzen.Blazor // For RadzenDataGrid, RadzenLink etc.
@using LehmanCustomConstruction.Data 
@using LehmanCustomConstruction.Data.Common  
@using LehmanCustomConstruction.Components.Shared  

@* Service Injections *@
@inject ILogger<DocumentsPage> Logger
@inject IConfiguration Configuration
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService // Inject for user feedback


<PageTitle>My Documents | Lehman Custom Construction</PageTitle>

<h3 class="text-2xl font-semibold text-primary dark:text-gray-100 mb-6 font-serif">Project Documents</h3>

@* --- Upload Section --- *@
@* Using the reusable component - Comment removed from inside tag *@
<FileUploadComponent TargetUserId="@_currentUserId"
                     UploaderUserId="@_currentUserId" @* Customer uploads for themselves *@
                     AllowMultipleFiles="true"
                     AllowDescription="true"
                     Title="Upload New Document(s)"
                     UploadButtonText="Upload Selected Files"
                     CssClass="mb-8"
                     IsInDemoMode="@_isInDemoMode"
                     OnUploadComplete="@HandleUploadCompletion"
                     OnUploadError="@HandleUploadError" />

@* --- Uploaded Documents List --- *@
<div class="bg-white dark:bg-gray-800 border border-subtle dark:border-gray-700 rounded-lg shadow-sm p-6">
    <h4 class="text-xl font-semibold text-primary dark:text-gray-100 mb-4 font-serif">My Documents</h4>
    @if (_isLoadingDocuments)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
        <p class="text-secondary dark:text-gray-400">Loading documents...</p>
    }
    else if (_userDocuments == null || !_userDocuments.Any())
    {
        <p class="text-secondary dark:text-gray-400">No documents have been uploaded for your account yet.</p>
    }
    else
    {
        <RadzenDataGrid Data="@_userDocuments" TItem="CustomerDocument" AllowSorting="true" AllowPaging="true" PageSize="10"
                        PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" PagerAlwaysVisible="true" PageSizeOptions="new int[] { 5, 10, 20 }"
                        Density="Density.Compact" Style="width: 100%;" EmptyText="No documents found." IsLoading="@_isLoadingDocuments">
            <Columns>
                <RadzenDataGridColumn TItem="CustomerDocument" Property="OriginalFileName" Title="File Name" Width="250px" />
                <RadzenDataGridColumn TItem="CustomerDocument" Property="Description" Title="Description" />
                <RadzenDataGridColumn TItem="CustomerDocument" Property="UploadTimestamp" Title="Uploaded On" FormatString="{0:yyyy-MM-dd HH:mm}" Width="180px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="CustomerDocument" Title="Size" Property="FileSize" Sortable="true" Filterable="false" Width="120px" TextAlign="TextAlign.Right">
                    <Template Context="doc">
                        @FormatFileSize(doc.FileSize)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CustomerDocument" Title="Download" Sortable="false" Filterable="false" Width="100px" TextAlign="TextAlign.Center">
                    <Template Context="doc">
                        <RadzenLink Path="@($"/download/{doc.Id}")" Text="Download" Target="_blank" Icon="download" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>

@code {
    // --- Component State ---
    private bool _isLoadingDocuments = true;
    private bool _isInDemoMode = false; // Flag to indicate demo mode

    // --- Data ---
    private List<CustomerDocument> _userDocuments = new();
    private string? _currentUserId; // Determined in OnInitialized

    // --- REMOVED OLD UPLOAD VARIABLES ---

    // --- Lifecycle Method ---
    protected override async Task OnInitializedAsync()
    {
        _isLoadingDocuments = true;
        _isInDemoMode = false; // Reset flag
        await InvokeAsync(StateHasChanged);

        // Load configuration needed for other parts maybe? Keep config injection if needed.
        // _maxFileSize = Configuration.GetValue<long>("FileUploadSettings:MaxFileSizeMB", 20) * 1024 * 1024;
        // _baseUploadDirectory = Configuration["FileUploadSettings:BasePath"] ?? Path.Combine("wwwroot", "user_uploads");
        // if (string.IsNullOrWhiteSpace(Configuration["FileUploadSettings:BasePath"])) { Logger.LogWarning("FileUploadSettings:BasePath not configured."); }

        // Get auth state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
             _currentUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
             Logger.LogInformation("User authenticated. User ID: {UserId}", _currentUserId);
        }
        else
        {
             // --- DEMO MODE: HARDCODE USER ID ---
             _currentUserId = "683a96be-9b4a-4af7-a863-b98a88815cae"; // User test4@test.com's ID
             _isInDemoMode = true; // Set demo flag
             Logger.LogWarning("User not authenticated. DEMO MODE: Using hardcoded User ID: {UserId}", _currentUserId);
        }

        if (string.IsNullOrEmpty(_currentUserId))
        {
            Logger.LogError("Could not determine User ID. Cannot load or upload documents.");
            _isLoadingDocuments = false;
            await InvokeAsync(StateHasChanged);
            // Maybe redirect or show permanent error?
             NotificationService.Notify(NotificationSeverity.Error, "Error", "Could not identify user account.");
             // NavigationManager.NavigateTo("/Error?message=UserIdentificationFailed", forceLoad: true); // Example redirect
            return;
        }

        await LoadUserDocuments(); // Load documents

        _isLoadingDocuments = false;
        await InvokeAsync(StateHasChanged); // Final UI update after loading
    }

    // --- Data Loading Method ---
    private async Task LoadUserDocuments()
    {
        if (string.IsNullOrEmpty(_currentUserId)) { Logger.LogWarning("LoadUserDocuments called without a valid _currentUserId."); _userDocuments = new List<CustomerDocument>(); return; }
        _isLoadingDocuments = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            _userDocuments = await DbContext.CustomerDocuments
                .Where(d => d.TargetUserId == _currentUserId && !d.IsDeleted)
                .OrderByDescending(d => d.UploadTimestamp)
                .AsNoTracking()
                .ToListAsync();
            Logger.LogInformation("Loaded {Count} documents for user {UserId}", _userDocuments.Count, _currentUserId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error retrieving documents for user {UserId}", _currentUserId);
            _userDocuments = new List<CustomerDocument>(); // Ensure empty list on error
            NotificationService.Notify(NotificationSeverity.Error, "Load Error", "Could not retrieve document list.");
        }
        finally { _isLoadingDocuments = false; } // Grid IsLoading handles UI
    }

    // --- File Upload Component Event Handlers ---
    private async Task HandleUploadCompletion(List<CustomerDocument> savedDocs)
    {
        Logger.LogInformation("Portal page received {Count} uploaded documents for user {UserId}.", savedDocs.Count, _currentUserId);
        await LoadUserDocuments(); // Refresh the grid
        // Notification already shown by component
        await InvokeAsync(StateHasChanged); // Ensure grid refresh updates UI if needed
    }

    private void HandleUploadError(string errorMessage)
    {
        Logger.LogError("Portal page received upload error for user {UserId}: {Error}", _currentUserId, errorMessage);
        // Notification already shown by component
    }

    // --- Helper Methods ---
    private string FormatFileSize(long bytes) { const long k=1024,m=k*k,g=m*k;if(bytes<0)return "?";if(bytes==0)return "0 B";if(bytes<k)return $"{bytes} B";if(bytes<m)return $"{(double)bytes/k:F1} KB";if(bytes<g)return $"{(double)bytes/m:F1} MB";return $"{(double)bytes/g:F1} GB"; }
}