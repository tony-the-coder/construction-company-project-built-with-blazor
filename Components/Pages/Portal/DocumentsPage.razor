@* File: Components/Pages/Portal/DocumentsPage.razor *@
@page "/portal/documents"
@layout PortalLayout
@rendermode InteractiveServer

@* --- AUTHORIZATION TEMPORARILY DISABLED FOR DEMO --- *@
@* @attribute [Authorize] *@
@* --- REMEMBER TO RE-ENABLE AUTHORIZATION AFTER DEMO --- *@

@* Using Statements *@
@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Security
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms // Needed for EditForm, InputFile
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Logging
@using Radzen
@using Radzen.Blazor
@using LehmanCustomConstruction.Data
@using LehmanCustomConstruction.Data.Common
@* Remove Shared using if component deleted *@
@* @using LehmanCustomConstruction.Components.Shared *@

@* Service Injections *@
@inject ILogger<DocumentsPage> Logger
@inject IConfiguration Configuration
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService


<PageTitle>My Documents | Lehman Custom Construction</PageTitle>

<h3 class="text-2xl font-semibold text-primary dark:text-gray-100 mb-6 font-serif">Project Documents</h3>

@* --- Upload Section (Using InputFile) --- *@
<div class="bg-white dark:bg-gray-800 border border-subtle dark:border-gray-700 rounded-lg shadow-sm p-6 mb-8">
    <h4 class="text-xl font-semibold text-primary dark:text-gray-100 mb-4 font-serif">Upload New Document</h4>

    @* Upload Result Message *@
    @if (!string.IsNullOrEmpty(_userFeedbackMessage))
    {
        <div class="@(_feedbackSuccess ? "bg-green-100 border border-green-400 text-green-700 dark:bg-green-900/50 dark:border-green-600 dark:text-green-300" : "bg-red-100 border border-red-400 text-red-700 dark:bg-red-900/50 dark:border-red-600 dark:text-red-300") px-4 py-3 rounded relative mb-4" role="alert">
            <span class="block sm:inline">@((MarkupString)_userFeedbackMessage)</span>
        </div>
    }

    @if (_isInDemoMode)
    {
        <p class="text-orange-600 dark:text-orange-400 mb-4"><em>Note: Running in demo mode without login. Uploads will be associated with demo user.</em></p>
    }

    <EditForm Model="_uploadModel" OnValidSubmit="HandleFileUpload">
        <DataAnnotationsValidator />

        @* File Input *@
        <div class="mb-4">
            <label for="portalDocumentFile" class="block text-sm font-medium text-primary dark:text-gray-300 mb-1">Select File(s)</label>
            <InputFile id="portalDocumentFile" OnChange="HandleFileSelected" multiple class="block w-full text-sm text-gray-500 dark:text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-accent/10 dark:file:bg-accent/20 file:text-accent dark:file:text-accent/90 hover:file:bg-accent/20 dark:hover:file:bg-accent/30" accept="@_allowedExtensionsString" />
            <ValidationMessage For="@(() => _uploadModel.FilesToUpload)" class="text-red-600 dark:text-red-400 text-xs mt-1" />
            @if (_isFileLoading)
            {
                <p class="text-sm text-blue-600 dark:text-blue-400 mt-1">Processing...</p>
            }
            else if (_uploadModel.FilesToUpload.Any())
            {
                <p class="mt-1 text-xs text-secondary dark:text-gray-400">Selected: @_uploadModel.FilesToUpload.Count file(s)</p>
            }
            else
            {
                <p class="mt-1 text-xs text-secondary dark:text-gray-400">Max size: @(_maxFileSize / (1024 * 1024)) MB. Allowed: @string.Join(", ", _allowedExtensions.Select(ext => ext.ToUpperInvariant()))</p>
            }
        </div>

        @* Description Input *@
        <div class="mb-4">
            <label for="portalDescription" class="block text-sm font-medium text-primary dark:text-gray-300 mb-1">Description (Optional - applies to all selected files)</label>
            <InputText id="portalDescription" @bind-Value="_uploadModel.Description" class="block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-accent focus:ring-accent sm:text-sm bg-white dark:bg-gray-700 text-primary dark:text-gray-100 placeholder-gray-400 dark:placeholder-gray-500" placeholder="E.g., Renovation Plans v1" />
            <ValidationMessage For="@(() => _uploadModel.Description)" class="text-red-600 dark:text-red-400 text-xs mt-1" />
        </div>

        @* Submit Button *@
        <button type="submit" class="inline-flex items-center px-4 py-2 bg-accent border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800 focus:ring-accent disabled:opacity-50 disabled:cursor-not-allowed"
                disabled="@(!_uploadModel.FilesToUpload.Any() || _isFileLoading || _isUploading || string.IsNullOrEmpty(_currentUserId))">
            @if (_isUploading)
            {
                <span><svg class="animate-spin..." xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle... /><path... /></svg>Uploading...</span>
            }
            else
            {
                <span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5..."><path... /><path... /></svg>Upload Document(s)</span>
            }
        </button>
    </EditForm>
</div>

@* --- Uploaded Documents List --- *@
<div class="bg-white dark:bg-gray-800 border border-subtle dark:border-gray-700 rounded-lg shadow-sm p-6">
    <h4 class="text-xl font-semibold text-primary dark:text-gray-100 mb-4 font-serif">My Documents</h4>
    @if (_isLoadingDocuments)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />

        <p class="text-secondary...">Loading documents...</p>
    }
    else if (_userDocuments == null || !_userDocuments.Any())
    {
        <p class="text-secondary dark:text-gray-400">No documents found for this account.</p>
    }
    else
    {
        <RadzenDataGrid Data="@_userDocuments" TItem="CustomerDocument" AllowSorting="true" AllowPaging="true" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" PagerAlwaysVisible="true" PageSizeOptions="new int[] { 5, 10, 20 }" Density="Density.Compact" Style="width: 100%;" EmptyText="No documents found." IsLoading="@_isLoadingDocuments">
            <Columns>
                <RadzenDataGridColumn TItem="CustomerDocument" Property="OriginalFileName" Title="File Name" Width="250px" />
                <RadzenDataGridColumn TItem="CustomerDocument" Property="Description" Title="Description" />
                <RadzenDataGridColumn TItem="CustomerDocument" Property="UploadTimestamp" Title="Uploaded On" FormatString="{0:yyyy-MM-dd HH:mm}" Width="180px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="CustomerDocument" Title="Size" Property="FileSize" Sortable="true" Filterable="false" Width="120px" TextAlign="TextAlign.Right"><Template Context="doc">@FormatFileSize(doc.FileSize)</Template></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CustomerDocument" Title="Download" Sortable="false" Filterable="false" Width="100px" TextAlign="TextAlign.Center"><Template Context="doc"><RadzenLink Path="@($"/download/{doc.Id}")" Text="Download" Target="_blank" Icon="download" /></Template></RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>

@code {
    // --- Component State ---
    private bool _isLoadingDocuments = true;
    private bool _isInDemoMode = false;

    // --- Data ---
    private List<CustomerDocument> _userDocuments = new();
    private string? _currentUserId; // Determined in OnInitialized

    // --- Upload State (InputFile) ---
    private UploadModel _uploadModel = new();
    private bool _isFileLoading = false;
    private bool _isUploading = false;
    private string? _userFeedbackMessage;
    private bool _feedbackSuccess;

    // --- Config ---
    private long _maxFileSize;
    private string _baseUploadDirectory = string.Empty;
    private readonly HashSet<string> _allowedExtensions = new(StringComparer.OrdinalIgnoreCase) { ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".txt", ".csv", ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tif", ".tiff", ".webp" };
    private string _allowedExtensionsString => string.Join(",", _allowedExtensions);

    // --- Upload ViewModel (InputFile) ---
    private class UploadModel
    {
        [Required(ErrorMessage = "Please select at least one file.")]
        [MinLength(1, ErrorMessage = "Please select at least one file.")]
        public List<IBrowserFile> FilesToUpload { get; set; } = new();
        [StringLength(500)] public string? Description { get; set; }
    }

    // --- Lifecycle Method ---
    protected override void OnInitialized() { _maxFileSize = Configuration.GetValue<long>("FileUploadSettings:MaxFileSizeMB", 20) * 1024 * 1024; _baseUploadDirectory = Configuration["FileUploadSettings:BasePath"] ?? ""; if (string.IsNullOrWhiteSpace(_baseUploadDirectory) || !Path.IsPathRooted(_baseUploadDirectory)) { Logger.LogError("BasePath '{Path}' invalid.", _baseUploadDirectory); _baseUploadDirectory = ""; } else { Logger.LogInformation("Portal Docs Init. Base Path: {Path}", _baseUploadDirectory); } }
    protected override async Task OnParametersSetAsync() // Changed OnInitializedAsync back to this for parameter handling
    {
        _isLoadingDocuments = true; _isInDemoMode = false; await InvokeAsync(StateHasChanged);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync(); var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false) { _currentUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value; Logger.LogInformation("Portal Docs: User authenticated. ID: {UserId}", _currentUserId); }
        else { _currentUserId = "683a96be-9b4a-4af7-a863-b98a88815cae"; _isInDemoMode = true; Logger.LogWarning("Portal Docs: User not authenticated. DEMO MODE using ID: {UserId}", _currentUserId); }
        if (string.IsNullOrEmpty(_currentUserId)) { Logger.LogError("Portal Docs: Could not determine User ID."); _isLoadingDocuments = false; await InvokeAsync(StateHasChanged); NotificationService.Notify(NotificationSeverity.Error, "Error", "Could not identify user."); return; }
        await LoadUserDocuments(); _isLoadingDocuments = false; await InvokeAsync(StateHasChanged);
    }

    // --- Data Loading Method ---
    private async Task LoadUserDocuments() { if (string.IsNullOrEmpty(_currentUserId)) { /*...*/ return; } _isLoadingDocuments = true; await InvokeAsync(StateHasChanged); try { _userDocuments = await DbContext.CustomerDocuments.Where(d => d.TargetUserId == _currentUserId && !d.IsDeleted).OrderByDescending(d => d.UploadTimestamp).AsNoTracking().ToListAsync(); Logger.LogInformation("Portal loaded {Count} docs for user {UserId}", _userDocuments.Count, _currentUserId); } catch (Exception ex) { Logger.LogError(ex, "Portal error retrieving docs for user {UserId}", _currentUserId); _userDocuments = new List<CustomerDocument>(); NotificationService.Notify(NotificationSeverity.Error, "Load Error", "Could not retrieve documents."); } finally { _isLoadingDocuments = false; } }

    // --- File Input Handling ---
    private async Task HandleFileSelected(InputFileChangeEventArgs e) { _isFileLoading = true; _userFeedbackMessage = null; _uploadModel.FilesToUpload.Clear(); _feedbackSuccess = false; await InvokeAsync(StateHasChanged); List<IBrowserFile> validFiles = new(); try { foreach (var file in e.GetMultipleFiles(100)) { if (ValidateFile(file)) { validFiles.Add(file); } else { NotificationService.Notify(NotificationSeverity.Warning, "Invalid File", $"{file.Name}: {_userFeedbackMessage}"); } } _uploadModel.FilesToUpload = validFiles; if (!validFiles.Any() && e.FileCount > 0) { _userFeedbackMessage = "No valid files selected."; _feedbackSuccess = false; } else { _userFeedbackMessage = null; } } catch (Exception ex) { Logger.LogError(ex, "Error selecting files."); _userFeedbackMessage = $"Error selecting files: {ex.Message}"; _feedbackSuccess = false; } finally { _isFileLoading = false; await InvokeAsync(StateHasChanged); } }

    // --- File Upload Submission (InputFile Based) ---
    private async Task HandleFileUpload()
    {
        if (!_uploadModel.FilesToUpload.Any()) { /*...*/ return; }
        if (_isFileLoading || _isUploading) return;
        if (string.IsNullOrEmpty(_currentUserId)) { /*...*/ return; }
        if (string.IsNullOrEmpty(_baseUploadDirectory)) { /*...*/ return; }

        _isUploading = true; _userFeedbackMessage = null; await InvokeAsync(StateHasChanged);
        var uploaderUserId = _currentUserId; // Customer uploads for self
        var targetUserId = _currentUserId;   // File is for this customer
        List<CustomerDocument> savedDocs = new(); bool anyError = false; string? collectiveDescription = _uploadModel.Description?.Trim();

        foreach (var file in _uploadModel.FilesToUpload)
        {
            long currentFileSize = 0; try { currentFileSize = file.Size; } catch (Exception ex) { /*...*/ anyError = true; continue; }
            if (!ValidateFile(file, currentFileSize)) { anyError = true; continue; }

            string userDirectory = Path.Combine(_baseUploadDirectory, targetUserId); string safeOriginalFileName = Path.GetFileName(file.Name); string uniqueFileName = $"{Guid.NewGuid()}{Path.GetExtension(safeOriginalFileName)}"; string filePath = Path.Combine(userDirectory, uniqueFileName); string? savedFilePath = null;
            try { Directory.CreateDirectory(userDirectory); var fullDirectoryPath = Path.GetFullPath(userDirectory); var fullFilePath = Path.GetFullPath(filePath); if (!fullFilePath.StartsWith(fullDirectoryPath, StringComparison.OrdinalIgnoreCase)) { throw new SecurityException($"Path error for {safeOriginalFileName}."); } Logger.LogInformation("Portal Saving '{Original}' ({Size}) for {TargetUser} by {UploaderUser} to {Path}", safeOriginalFileName, currentFileSize, targetUserId, uploaderUserId, filePath); await using FileStream fs = new(filePath, FileMode.Create); using var stream = file.OpenReadStream(_maxFileSize); await stream.CopyToAsync(fs); savedFilePath = filePath; Logger.LogInformation("Saved: {Path}", filePath); var document = new CustomerDocument { OriginalFileName = safeOriginalFileName, StoredFileName = uniqueFileName, ContentType = file.ContentType ?? "application/octet-stream", FileSize = currentFileSize, UploadTimestamp = DateTime.UtcNow, Description = collectiveDescription, UploadedById = uploaderUserId, TargetUserId = targetUserId, IsDeleted = false }; DbContext.CustomerDocuments.Add(document); await DbContext.SaveChangesAsync(); Logger.LogInformation("DB record created ID: {DocId}", document.Id); savedDocs.Add(document); }
            catch (Exception ex) { anyError = true; Logger.LogError(ex, "Error uploading file '{Original}' for target {TargetUser}", safeOriginalFileName, targetUserId); _userFeedbackMessage = $"Error uploading {safeOriginalFileName}: {ex.Message}"; NotificationService.Notify(NotificationSeverity.Error, $"Upload Error: {safeOriginalFileName}", ex.Message); TryDeleteFile(savedFilePath); }
        } // End foreach

        _isUploading = false; _uploadModel = new(); // Reset form
        if (savedDocs.Any() && !anyError) { _userFeedbackMessage = $"{savedDocs.Count} file(s) uploaded."; _feedbackSuccess = true; NotificationService.Notify(NotificationSeverity.Success, "Upload Complete", _userFeedbackMessage); await LoadUserDocuments(); }
        else if (savedDocs.Any() && anyError) { _userFeedbackMessage = $"Partial success: {savedDocs.Count} uploaded, some failed."; _feedbackSuccess = false; NotificationService.Notify(NotificationSeverity.Warning, "Partial Upload", _userFeedbackMessage); await LoadUserDocuments(); }
        else if (anyError) { _feedbackSuccess = false; } else { _userFeedbackMessage ??= "No valid files selected."; _feedbackSuccess = false; }
        await InvokeAsync(StateHasChanged);
    }

    // --- Helper Methods ---
    private bool ValidateFile(IBrowserFile file, long fileSize) { if (file == null) { _userFeedbackMessage = "No file selected."; _feedbackSuccess = false; return false; } if (fileSize == 0) { _userFeedbackMessage = $"Cannot upload empty file: {file.Name}."; _feedbackSuccess = false; return false; } if (fileSize > _maxFileSize) { _userFeedbackMessage = $"File {file.Name} exceeds size limit ({FormatFileSize(_maxFileSize)})."; _feedbackSuccess = false; return false; } var fileExtension = Path.GetExtension(file.Name); if (string.IsNullOrEmpty(fileExtension) || !_allowedExtensions.Contains(fileExtension)) { _userFeedbackMessage = $"Invalid file type: {file.Name}. Allowed: {string.Join(", ", _allowedExtensions.Select(ext => ext.ToUpperInvariant()))}"; _feedbackSuccess = false; return false; } _userFeedbackMessage = null; return true; }
    private bool ValidateFile(IBrowserFile file) { long size = 0; try { size = file.Size; } catch { } if (file == null) { /*...*/ return false; } var fileExtension = Path.GetExtension(file.Name); if (string.IsNullOrEmpty(fileExtension) || !_allowedExtensions.Contains(fileExtension)) { /*...*/ return false; } if (size > 0 && size > _maxFileSize) { /*...*/ return false; } _userFeedbackMessage = null; return true; }
    private void TryDeleteFile(string? filePath) { if (filePath != null && File.Exists(filePath)) { try { File.Delete(filePath); Logger.LogWarning("Cleaned up file '{FilePath}' due to upload error.", filePath); } catch (Exception delEx) { Logger.LogError(delEx, "Failed to clean up file '{FilePath}' after upload error.", filePath); } } }
    private string FormatFileSize(long bytes) { const long k = 1024, m = k * k, g = m * k; if (bytes < 0) return "?"; if (bytes == 0) return "0 B"; if (bytes < k) return $"{bytes} B"; if (bytes < m) return $"{(double)bytes / k:F1} KB"; if (bytes < g) return $"{(double)bytes / m:F1} MB"; return $"{(double)bytes / g:F1} GB"; }
}