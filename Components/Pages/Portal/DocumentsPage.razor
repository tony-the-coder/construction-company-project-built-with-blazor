@page "/portal/documents-demo2"
@layout PortalLayout

@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject ILogger<DocumentsPage> Logger
@inject ApplicationDbContext DbContext

@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using System.ComponentModel.DataAnnotations
@using LehmanCustomConstruction.Data.Common
@using Microsoft.EntityFrameworkCore

<PageTitle>Document Upload | Lehman Custom Construction</PageTitle>

<h3 class="text-2xl font-semibold text-primary mb-6 font-serif">Document Upload</h3>

<div class="bg-white border border-subtle rounded-lg shadow-sm p-6 mb-8">
    <h4 class="text-xl font-semibold text-primary mb-4 font-serif">Upload New Document</h4>

    @if (!string.IsNullOrEmpty(_uploadResultMessage))
    {
        <div class="@(_uploadSuccess ? "bg-green-100 border border-green-400 text-green-700" : "bg-red-100 border border-red-400 text-red-700") px-4 py-3 rounded relative mb-4" role="alert">
            <span class="block sm:inline">@_uploadResultMessage</span>
        </div>
    }

    <EditForm Model="_newDocumentModel" OnValidSubmit="HandleFileUpload">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-4">
            <label for="documentFile" class="block text-sm font-medium text-gray-700 mb-1">Select File</label>
            <InputFile id="documentFile" OnChange="HandleFileSelected" class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none" aria-describedby="file_input_help" />
            <p class="mt-1 text-sm text-gray-500" id="file_input_help">Max file size: @_maxFileSizeMB MB. Allowed types: PDF, DOC, DOCX, JPG, PNG, HEIC.</p>
            <ValidationMessage For="@(() => _newDocumentModel.BrowserFile)" />
            @if (_isFileLoading)
            {
                <p class="text-sm text-blue-600 mt-1">Loading file...</p>
            }
        </div>

        <div class="mb-4">
            <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
            <InputText id="description" @bind-Value="_newDocumentModel.Description" class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-accent focus:border-accent sm:text-sm" placeholder="E.g., Renovation Plans v1" />
            <ValidationMessage For="@(() => _newDocumentModel.Description)" />
        </div>

        <button type="submit" disabled="@_isUploading || _isFileLoading" class="inline-flex items-center px-4 py-2 bg-primary border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed">
            @if (_isUploading)
            {
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span>Uploading...</span>
            }
            else
            {
                <span>Upload Document</span>
            }
        </button>
    </EditForm>
</div>

<div class="bg-white border border-subtle rounded-lg shadow-sm p-6">
    <h4 class="text-xl font-semibold text-primary mb-4 font-serif">Uploaded Documents</h4>

    @if (_userDocuments == null && _loadDocumentsError == null)
    {
        <p class="text-secondary">Loading documents...</p>
    }
    else if (!string.IsNullOrEmpty(_loadDocumentsError))
    {
        <p class="text-red-600">Error loading documents: @_loadDocumentsError</p>
    }
    else if (_userDocuments != null && !_userDocuments.Any())
    {
        <p class="text-secondary">You haven't uploaded any documents yet.</p>
    }
    else if (_userDocuments != null)
    {
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">File Name</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Uploaded On</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Size</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var doc in _userDocuments)
                    {
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@doc.OriginalFileName</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@(doc.Description ?? "-")</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@doc.UploadTimestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@FormatFileSize(doc.FileSize)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private NewDocumentModel _newDocumentModel = new();
    private bool _isUploading = false;
    private bool _isFileLoading = false;
    private string? _uploadResultMessage;
    private bool _uploadSuccess = false;

    private List<CustomerDocument>? _userDocuments;
    private string? _loadDocumentsError;

    private long _maxFileSize = 20 * 1024 * 1024;
    private int _maxFileSizeMB = 20;
    private readonly string[] _allowedExtensions = { ".pdf", ".doc", ".docx", ".jpg", ".jpeg", ".png", ".heic" };

    private class NewDocumentModel
    {
        [Required(ErrorMessage = "Please select a file to upload.")]
        public IBrowserFile? BrowserFile { get; set; }

        [StringLength(500, ErrorMessage = "Description cannot exceed 500 characters.")]
        public string? Description { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _userDocuments = await DbContext.CustomerDocuments
                .OrderByDescending(d => d.UploadTimestamp)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading documents.");
            _loadDocumentsError = "An error occurred while loading documents.";
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        _isFileLoading = true;
        _uploadResultMessage = null;

        try
        {
            _newDocumentModel.BrowserFile = e.File;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error selecting file.");
            _uploadResultMessage = "Error selecting file.";
        }
        finally
        {
            _isFileLoading = false;
        }
    }

    private async Task HandleFileUpload()
    {
        if (_newDocumentModel.BrowserFile == null)
        {
            _uploadResultMessage = "Please select a file.";
            return;
        }

        _isUploading = true;
        _uploadResultMessage = null;

        try
        {
            string fileName = $"{Guid.NewGuid()}{Path.GetExtension(_newDocumentModel.BrowserFile.Name)}";
            string filePath = Path.Combine(Configuration["FileStorageSettings:UploadBasePath"], fileName);

            await using FileStream fs = new(filePath, FileMode.Create);
            await _newDocumentModel.BrowserFile.OpenReadStream(_maxFileSize).CopyToAsync(fs);

            var document = new CustomerDocument
                {
                    OriginalFileName = _newDocumentModel.BrowserFile.Name,
                    StoredFileName = fileName,
                    FileSize = _newDocumentModel.BrowserFile.Size,
                    UploadTimestamp = DateTime.UtcNow,
                    Description = _newDocumentModel.Description
                };

            DbContext.CustomerDocuments.Add(document);
            await DbContext.SaveChangesAsync();

            _uploadSuccess = true;
            _uploadResultMessage = "File uploaded successfully.";
            _userDocuments?.Insert(0, document);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error uploading file.");
            _uploadResultMessage = "Error uploading file.";
        }
        finally
        {
            _isUploading = false;
        }
    }

    private string FormatFileSize(long bytes)
    {
        if (bytes < 1024) return $"{bytes} B";
        if (bytes < 1024 * 1024) return $"{bytes / 1024.0:F1} KB";
        return $"{bytes / (1024.0 * 1024.0):F1} MB";
    }
}
