@page "/portal/documents-demo"
@inject ILogger<Document_demo> Logger
@inject IConfiguration Configuration // Inject IConfiguration
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager // Inject NavigationManager

@using LehmanCustomConstruction.Data.Common
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Radzen.Blazor
@using System.Security

<PageTitle>Document Upload and View</PageTitle>

<h3 class="text-2xl font-semibold text-primary mb-6 font-serif">Document Upload and View</h3>

<div class="bg-white border border-subtle rounded-lg shadow-sm p-6 mb-8">
    <h4 class="text-xl font-semibold text-primary mb-4 font-serif">Upload New Document</h4>
    @if (!string.IsNullOrEmpty(_uploadResultMessage))
    {
        <div class="@(_uploadSuccess ? "bg-green-100 border border-green-400 text-green-700" : "bg-red-100 border border-red-400 text-red-700") px-4 py-3 rounded relative mb-4" role="alert">
            <span class="block sm:inline">@_uploadResultMessage</span>
        </div>
    }
    <EditForm Model="_uploadModel" OnValidSubmit="HandleFileUpload">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-4">
            <label for="documentFile" class="block text-sm font-medium text-gray-700 mb-1">Select File</label>
            <InputFile id="documentFile" OnChange="HandleFileSelected" class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none" />
            <ValidationMessage For="@(() => _uploadModel.FileToUpload)" />
            @if (_isFileLoading)
            {
                <p class="text-sm text-blue-600 mt-1">Processing file selection...</p>
            }
        </div>
        <div class="mb-4">
            <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
            <InputText id="description" @bind-Value="_uploadModel.Description" class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-accent focus:border-accent sm:text-sm" placeholder="E.g., Renovation Plans v1" />
            <ValidationMessage For="@(() => _uploadModel.Description)" />
        </div>
        <button type="submit" class="inline-flex items-center px-4 py-2 bg-primary border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed" disabled="@(_uploadModel.FileToUpload == null)">
            Upload Document
        </button>
    </EditForm>
</div>

<div class="bg-white border border-subtle rounded-lg shadow-sm p-6">
    <h4 class="text-xl font-semibold text-primary mb-4 font-serif">Uploaded Documents</h4>
    @if (_uploadedFiles == null || !_uploadedFiles.Any())
    {
        <p class="text-secondary">No documents uploaded yet.</p>
    }
    else
    {
        <RadzenDataGrid Data="@_uploadedFiles" TItem="CustomerDocument" AllowSorting="true" AllowPaging="true" PageSize="10"
                        PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Density="Density.Compact" Style="width: 100%;" EmptyText="No documents found.">
            <Columns>
                <RadzenDataGridColumn TItem="CustomerDocument" Property="OriginalFileName" Title="File Name" Width="250px" />
                <RadzenDataGridColumn TItem="CustomerDocument" Property="Description" Title="Description" />
                <RadzenDataGridColumn TItem="CustomerDocument" Property="UploadTimestamp" Title="Uploaded On" FormatString="{0:yyyy-MM-dd HH:mm}" Width="180px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="CustomerDocument" Title="Size" Property="FileSize" Sortable="true" Filterable="false" Width="120px" TextAlign="TextAlign.Right">
                    <Template Context="doc">
                        @FormatFileSize(doc.FileSize)
                    </Template>
                </RadzenDataGridColumn>

                @* --- New Download Column --- *@
                <RadzenDataGridColumn TItem="CustomerDocument" Title="Download" Sortable="false" Filterable="false" Width="100px" TextAlign="TextAlign.Center">
                    <Template Context="doc">
                        @* Link directly to the download endpoint, passing the document ID *@
                        <a href="@($"/download/{doc.Id}")" target="_blank" class="text-accent hover:text-accent-dark font-medium">
                            Download
                            @* Optional: Use an icon instead/as well *@
                            @* <i class="fas fa-download"></i> *@
                        </a>
                        @* --- Alternative: Button triggering C# method (more complex) ---
                           <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="download" Size="ButtonSize.ExtraSmall" Click=@(() => DownloadFile(doc.Id)) />
                         *@
                    </Template>
                </RadzenDataGridColumn>
                @* --- End New Download Column --- *@

            </Columns>
        </RadzenDataGrid>
    }
</div>

@code {
    // --- Existing code block ---
    private UploadModel _uploadModel = new();
    private bool _isFileLoading = false;
    private string? _uploadResultMessage;
    private bool _uploadSuccess;

    private List<CustomerDocument> _uploadedFiles = new();

    // Read base path from configuration - safer!
    private string BaseUploadDirectory => Configuration["FileUploadSettings:BasePath"] ?? @"C:\LehmanConstructionUploads_Default";
    private readonly long _maxFileSize = 20 * 1024 * 1024; // 20 MB

    private class UploadModel
    {
        [Required(ErrorMessage = "Please select a file.")]
        public IBrowserFile? FileToUpload { get; set; }
        [StringLength(500, ErrorMessage = "Description cannot exceed 500 characters.")]
        public string? Description { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the base upload directory is configured correctly
        var configuredPath = Configuration["FileUploadSettings:BasePath"];
        if (string.IsNullOrWhiteSpace(configuredPath))
        {
            Logger.LogWarning("FileUploadSettings:BasePath is not configured in appsettings.json. Using default path: {DefaultPath}", BaseUploadDirectory);
        }

        await LoadUserDocuments();
    }

    private async Task LoadUserDocuments()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (userId != null)
            {
                try
                {
                    _uploadedFiles = await DbContext.CustomerDocuments
                        .Where(d => d.UploadedById == userId)
                        .OrderByDescending(d => d.UploadTimestamp)
                        .ToListAsync();
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Error retrieving documents for user {UserId} from database.", userId);
                    _uploadedFiles = new List<CustomerDocument>();
                    _uploadResultMessage = "Error loading existing documents.";
                    _uploadSuccess = false;
                }
            }
            else
            {
                Logger.LogWarning("User is authenticated but NameIdentifier claim is missing.");
                _uploadedFiles = new List<CustomerDocument>();
            }
        }
        else
        {
            _uploadedFiles = new List<CustomerDocument>();
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        _isFileLoading = true;
        _uploadResultMessage = null;
        _uploadModel.FileToUpload = null;
        _uploadSuccess = false;

        try
        {
            if (e.File != null)
            {
                if (e.File.Size > _maxFileSize)
                {
                    _uploadResultMessage = $"File size exceeds the limit of {FormatFileSize(_maxFileSize)}.";
                    _uploadSuccess = false;
                    _uploadModel.FileToUpload = null;
                }
                else
                {
                    _uploadModel.FileToUpload = e.File;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during file selection.");
            _uploadResultMessage = $"Error selecting file: {ex.Message}";
            _uploadSuccess = false;
        }
        finally
        {
            _isFileLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleFileUpload()
    {
        _uploadResultMessage = null;
        _uploadSuccess = false;

        if (_uploadModel.FileToUpload == null)
        {
            _uploadResultMessage = "Please select a valid file that is within the size limit.";
            _uploadSuccess = false;
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!(user.Identity?.IsAuthenticated ?? false))
        {
            _uploadResultMessage = "You must be logged in to upload files.";
            _uploadSuccess = false; return;
        }

        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (userId == null)
        {
            _uploadResultMessage = "Unable to determine user identity.";
            _uploadSuccess = false; return;
        }

        string baseDir = BaseUploadDirectory; // Use property
        if (string.IsNullOrWhiteSpace(baseDir) || baseDir.Length < 3) // Basic sanity check
        {
            _uploadResultMessage = "Server configuration error: Upload directory is not configured correctly.";
            _uploadSuccess = false; return;
        }

        string userDirectory = Path.Combine(baseDir, userId);
        if (userId.IndexOfAny(Path.GetInvalidFileNameChars()) != -1 || userId.Contains(".."))
        {
            _uploadResultMessage = $"Server error: Invalid user identifier format.";
            _uploadSuccess = false; return;
        }

        string? filePath = null;
        try
        {
            Directory.CreateDirectory(userDirectory); // Creates if not exists

            string safeOriginalFileName = Path.GetFileName(_uploadModel.FileToUpload.Name);
            string uniqueFileName = $"{Guid.NewGuid()}{Path.GetExtension(safeOriginalFileName)}";
            filePath = Path.Combine(userDirectory, uniqueFileName);

            var fullDirectoryPath = Path.GetFullPath(userDirectory);
            var fullFilePath = Path.GetFullPath(filePath);
            if (!fullFilePath.StartsWith(fullDirectoryPath, StringComparison.OrdinalIgnoreCase))
            {
                throw new SecurityException("Calculated file path is outside the allowed directory.");
            }

            await using FileStream fs = new(filePath, FileMode.Create);
            await _uploadModel.FileToUpload.OpenReadStream(_maxFileSize).CopyToAsync(fs);

            var document = new CustomerDocument
                {
                    OriginalFileName = safeOriginalFileName,
                    StoredFileName = uniqueFileName,
                    ContentType = _uploadModel.FileToUpload.ContentType ?? "application/octet-stream",
                    FileSize = _uploadModel.FileToUpload.Size,
                    UploadTimestamp = DateTime.UtcNow,
                    Description = _uploadModel.Description,
                    UploadedById = userId,
                    TargetUserId = userId
                };

            DbContext.CustomerDocuments.Add(document);
            await DbContext.SaveChangesAsync();

            // Reload the list to ensure consistency, including the new item
            await LoadUserDocuments(); // This re-queries the DB

            _uploadResultMessage = $"File '{safeOriginalFileName}' uploaded successfully.";
            _uploadSuccess = true;
            _uploadModel = new(); // Reset form
        }
        catch (IOException ioEx) when (ioEx.Message.Contains("maximum allowed size")) { /* ... existing handler ... */ }
        catch (UnauthorizedAccessException authEx) { /* ... existing handler ... */ }
        catch (Exception ex) { /* ... existing handler ... */ }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private string FormatFileSize(long bytes)
    {
        const long kilobyte = 1024; const long megabyte = kilobyte * 1024; const long gigabyte = megabyte * 1024;
        if (bytes < 0) return "Invalid size"; if (bytes == 0) return "0 B";
        if (bytes < kilobyte) return $"{bytes} B"; if (bytes < megabyte) return $"{(double)bytes / kilobyte:F1} KB";
        if (bytes < gigabyte) return $"{(double)bytes / megabyte:F1} MB"; return $"{(double)bytes / gigabyte:F1} GB";
    }

    // --- Alternative Download Method (more complex setup needed) ---
    // Requires JSInterop to trigger browser download from stream
    // private async Task DownloadFile(int documentId)
    // {
    //     // This approach streams via Blazor Server signalR connection - not ideal for large files.
    //     // The API endpoint approach is generally preferred.
    //     // Placeholder - Implementation requires JSInterop call.
    //     NavigationManager.NavigateTo($"/download/{documentId}", forceLoad: true);
    // }
}