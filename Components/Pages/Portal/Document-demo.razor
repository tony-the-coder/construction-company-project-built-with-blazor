@page "/portal/documents-demo"
@inject ILogger<Document_demo> Logger
@inject IConfiguration Configuration // Inject IConfiguration
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager // Inject NavigationManager

@using LehmanCustomConstruction.Data.Common // Adjust namespace if needed
@using LehmanCustomConstruction.Data         // Assuming CustomerDocument is here
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Radzen
@using Radzen.Blazor
@using System.Security
@using Microsoft.AspNetCore.Components.Authorization // Required for AuthenticationStateProvider

<PageTitle>Document Upload and View</PageTitle>

<h3 class="text-2xl font-semibold text-primary mb-6 font-serif">Document Upload and View</h3>

<div class="bg-white border border-subtle rounded-lg shadow-sm p-6 mb-8">
    <h4 class="text-xl font-semibold text-primary mb-4 font-serif">Upload New Document</h4>
    @if (!string.IsNullOrEmpty(_uploadResultMessage))
    {
        <div class="@(_uploadSuccess ? "bg-green-100 border border-green-400 text-green-700" : "bg-red-100 border border-red-400 text-red-700") px-4 py-3 rounded relative mb-4" role="alert">
            <span class="block sm:inline">@_uploadResultMessage</span>
        </div>
    }
    <EditForm Model="_uploadModel" OnValidSubmit="HandleFileUpload">
        <DataAnnotationsValidator />
        <ValidationSummary class="mb-4 text-red-600" /> @* Added styling for ValidationSummary *@
        <div class="mb-4">
            <label for="documentFile" class="block text-sm font-medium text-gray-700 mb-1">Select File</label>
            <InputFile id="documentFile" OnChange="HandleFileSelected" class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none" accept="@string.Join(",", _allowedExtensions)" /> @* Added accept attribute *@
            <ValidationMessage For="@(() => _uploadModel.FileToUpload)" class="text-red-600 text-sm mt-1" />
            @if (_isFileLoading)
            {
                <p class="text-sm text-blue-600 mt-1">Processing file selection...</p>
            }
        </div>
        <div class="mb-4">
            <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
            <InputText id="description" @bind-Value="_uploadModel.Description" class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-accent focus:border-accent sm:text-sm" placeholder="E.g., Renovation Plans v1" />
            <ValidationMessage For="@(() => _uploadModel.Description)" class="text-red-600 text-sm mt-1" />
        </div>
        <button type="submit" class="inline-flex items-center px-4 py-2 bg-primary border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed" disabled="@(_uploadModel.FileToUpload == null || _isFileLoading)">
            Upload Document
        </button>
    </EditForm>
</div>

<div class="bg-white border border-subtle rounded-lg shadow-sm p-6">
    <h4 class="text-xl font-semibold text-primary mb-4 font-serif">Uploaded Documents</h4>
    @if (_isLoadingDocuments) // Added loading indicator for the grid
    {
        <p class="text-secondary">Loading documents...</p>
    }
    else if (_uploadedFiles == null || !_uploadedFiles.Any())
    {
        <p class="text-secondary">No documents uploaded yet.</p>
    }
    else
    {
        <RadzenDataGrid Data="@_uploadedFiles" TItem="CustomerDocument" AllowSorting="true" AllowPaging="true" PageSize="10"
                        PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Density="Density.Compact" Style="width: 100%;" EmptyText="No documents found." IsLoading="@_isLoadingDocuments">
            <Columns>
                <RadzenDataGridColumn TItem="CustomerDocument" Property="OriginalFileName" Title="File Name" Width="250px" />
                <RadzenDataGridColumn TItem="CustomerDocument" Property="Description" Title="Description" />
                <RadzenDataGridColumn TItem="CustomerDocument" Property="UploadTimestamp" Title="Uploaded On" FormatString="{0:yyyy-MM-dd HH:mm}" Width="180px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="CustomerDocument" Title="Size" Property="FileSize" Sortable="true" Filterable="false" Width="120px" TextAlign="TextAlign.Right">
                    <Template Context="doc">
                        @FormatFileSize(doc.FileSize)
                    </Template>
                </RadzenDataGridColumn>

                @* --- Download Column --- *@
                <RadzenDataGridColumn TItem="CustomerDocument" Title="Download" Sortable="false" Filterable="false" Width="100px" TextAlign="TextAlign.Center">
                    <Template Context="doc">
                        @* Link directly to the download endpoint, passing the document ID *@
                        <a href="@($"/download/{doc.Id}")" target="_blank" class="text-accent hover:text-accent-dark font-medium">
                            Download
                            @* Optional: Use an icon instead/as well *@
                            @* <i class="fas fa-download"></i> *@
                        </a>
                    </Template>
                </RadzenDataGridColumn>
                @* --- End Download Column --- *@

            </Columns>
        </RadzenDataGrid>
    }
</div>

@code {
    private UploadModel _uploadModel = new();
    private bool _isFileLoading = false; // For file selection processing
    private string? _uploadResultMessage;
    private bool _uploadSuccess;
    private bool _isLoadingDocuments = true; // To show loading state for the grid

    private List<CustomerDocument> _uploadedFiles = new();

    // Read base path from configuration - safer!
    private string BaseUploadDirectory => Configuration["FileUploadSettings:BasePath"] ?? @"C:\LehmanConstructionUploads_Default";
    private readonly long _maxFileSize = 20 * 1024 * 1024; // 20 MB

    // --- Allowed file extensions ---
    // Using HashSet for efficient lookups and StringComparer for case-insensitivity
    private readonly HashSet<string> _allowedExtensions = new(StringComparer.OrdinalIgnoreCase)
    {
        // Microsoft Office
        ".xls", ".xlsx", // Excel
        ".doc", ".docx", // Word
        ".ppt", ".pptx", // PowerPoint

        // Common Images
        ".jpg", ".jpeg",
        ".png",

        // Apple iWork Equivalents (Common Export/Native Formats)
        ".numbers",     // Apple Numbers
        ".pages",       // Apple Pages
        ".key",         // Apple Keynote

        // Others
        ".pdf"

        // Add any other extensions you need, e.g., ".gif", ".txt", ".csv"
    };

    private class UploadModel
    {
        [Required(ErrorMessage = "Please select a file.")]
        public IBrowserFile? FileToUpload { get; set; }

        [StringLength(500, ErrorMessage = "Description cannot exceed 500 characters.")]
        public string? Description { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        _isLoadingDocuments = true; // Start in loading state
        try
        {
            // Ensure the base upload directory is configured correctly
            var configuredPath = Configuration["FileUploadSettings:BasePath"];
            if (string.IsNullOrWhiteSpace(configuredPath))
            {
                Logger.LogWarning("FileUploadSettings:BasePath is not configured in appsettings.json. Using default path: {DefaultPath}", BaseUploadDirectory);
                // Consider throwing an error or preventing uploads if the path is essential and missing
            }

            await LoadUserDocuments();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during component initialization.");
            _uploadResultMessage = "Error initializing component."; // Show a general error
            _uploadSuccess = false;
        }
        finally
        {
            _isLoadingDocuments = false; // Done loading (or failed)
            await InvokeAsync(StateHasChanged); // Update UI after initial load
        }
    }

    private async Task LoadUserDocuments()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (userId != null)
            {
                try
                {
                    _uploadedFiles = await DbContext.CustomerDocuments
                        .Where(d => d.UploadedById == userId) // Or potentially TargetUserId depending on your logic
                        .OrderByDescending(d => d.UploadTimestamp)
                        .AsNoTracking() // Improve performance for read-only list
                        .ToListAsync();
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Error retrieving documents for user {UserId} from database.", userId);
                    _uploadedFiles = new List<CustomerDocument>();
                    _uploadResultMessage = "Error loading existing documents.";
                    _uploadSuccess = false;
                }
            }
            else
            {
                Logger.LogWarning("User is authenticated but NameIdentifier claim is missing.");
                _uploadedFiles = new List<CustomerDocument>();
            }
        }
        else
        {
            _uploadedFiles = new List<CustomerDocument>();
            // Optionally, redirect or show a message if unauthenticated user accesses this page
            // NavigationManager.NavigateTo("/login"); // Example
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        _isFileLoading = true;
        _uploadResultMessage = null; // Clear previous messages
        _uploadModel.FileToUpload = null; // Reset selection initially
        _uploadSuccess = false;
        await InvokeAsync(StateHasChanged); // Update UI to show loading state

        try
        {
            if (e.File != null)
            {
                // 1. Check Size
                if (e.File.Size > _maxFileSize)
                {
                    _uploadResultMessage = $"File size exceeds the limit of {FormatFileSize(_maxFileSize)}.";
                    _uploadSuccess = false;
                }
                else
                {
                    // 2. Check Extension
                    var fileExtension = Path.GetExtension(e.File.Name);
                    if (string.IsNullOrEmpty(fileExtension) || !_allowedExtensions.Contains(fileExtension))
                    {
                        _uploadResultMessage = $"Invalid file type ('{fileExtension}'). Allowed types are: {string.Join(", ", _allowedExtensions)}";
                        _uploadSuccess = false;
                    }
                    else
                    {
                        // File is valid (size and type)
                        _uploadModel.FileToUpload = e.File;
                        _uploadResultMessage = null; // Clear any previous error message
                    }
                }
            }
            else
            {
                _uploadResultMessage = "No file selected.";
                _uploadSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during file selection.");
            _uploadResultMessage = $"Error selecting file: {ex.Message}";
            _uploadSuccess = false;
        }
        finally
        {
            _isFileLoading = false;
            await InvokeAsync(StateHasChanged); // Update the UI to show messages or reflect selection
        }
    }

    private async Task HandleFileUpload()
    {
        // Prevent double submission if already processing
        if (_isFileLoading) return;

        _uploadResultMessage = null;
        _uploadSuccess = false;

        if (_uploadModel.FileToUpload == null)
        {
            _uploadResultMessage = "Please select a valid file that meets the size and type requirements.";
            _uploadSuccess = false;
            return;
        }

        // Re-validate file on submit just in case (though HandleFileSelected should prevent invalid state)
        var fileExtension = Path.GetExtension(_uploadModel.FileToUpload.Name);
        if (string.IsNullOrEmpty(fileExtension) || !_allowedExtensions.Contains(fileExtension))
        {
            _uploadResultMessage = $"Invalid file type ('{fileExtension}'). Cannot upload.";
            _uploadSuccess = false;
            _uploadModel.FileToUpload = null; // Clear invalid file
            await InvokeAsync(StateHasChanged);
            return;
        }
        if (_uploadModel.FileToUpload.Size > _maxFileSize)
        {
            _uploadResultMessage = $"File size exceeds the limit of {FormatFileSize(_maxFileSize)}. Cannot upload.";
            _uploadSuccess = false;
            _uploadModel.FileToUpload = null; // Clear invalid file
            await InvokeAsync(StateHasChanged);
            return;
        }


        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!(user.Identity?.IsAuthenticated ?? false))
        {
            _uploadResultMessage = "You must be logged in to upload files.";
            _uploadSuccess = false;
            // Consider redirecting: NavigationManager.NavigateTo("/login");
            return;
        }

        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (userId == null)
        {
            _uploadResultMessage = "Unable to determine user identity.";
            _uploadSuccess = false; return;
        }

        string baseDir = BaseUploadDirectory; // Use property
        if (string.IsNullOrWhiteSpace(baseDir) || baseDir.Length < 3) // Basic sanity check
        {
            Logger.LogError("FileUploadSettings:BasePath is not configured or invalid in configuration.");
            _uploadResultMessage = "Server configuration error: Upload directory is not set up correctly.";
            _uploadSuccess = false; return;
        }

        // --- Security: Validate User ID doesn't contain path traversal ---
        if (userId.IndexOfAny(Path.GetInvalidFileNameChars()) != -1 || userId.Contains(".."))
        {
            Logger.LogError("Invalid characters found in user ID for directory creation: {UserId}", userId);
            _uploadResultMessage = $"Server error: Cannot create storage for user.";
            _uploadSuccess = false; return;
        }
        string userDirectory = Path.Combine(baseDir, userId);


        string? filePath = null;
        try
        {
            Directory.CreateDirectory(userDirectory); // Creates if not exists, throws if invalid path chars

            string safeOriginalFileName = Path.GetFileName(_uploadModel.FileToUpload.Name); // Sanitize input filename
            string uniqueFileName = $"{Guid.NewGuid()}{Path.GetExtension(safeOriginalFileName)}"; // Create unique stored name
            filePath = Path.Combine(userDirectory, uniqueFileName);

            // --- Security: Ensure final path is within the intended user directory ---
            var fullDirectoryPath = Path.GetFullPath(userDirectory);
            var fullFilePath = Path.GetFullPath(filePath);
            if (!fullFilePath.StartsWith(fullDirectoryPath, StringComparison.OrdinalIgnoreCase))
            {
                Logger.LogError("Potential path traversal detected. User: {UserId}, Original: {OriginalFile}, Attempted Path: {FilePath}", userId, safeOriginalFileName, filePath);
                throw new SecurityException("Calculated file path is outside the allowed directory.");
            }
            // --- End Security Check ---

            Logger.LogInformation("Attempting to save file for user {UserId} to {FilePath}", userId, filePath);

            // Stream the file directly to the disk
            await using FileStream fs = new(filePath, FileMode.Create);
            // Use CancellationToken for potentially long uploads if needed
            await _uploadModel.FileToUpload.OpenReadStream(_maxFileSize).CopyToAsync(fs);

            Logger.LogInformation("File saved successfully to {FilePath}", filePath);

            // Create database record
            var document = new CustomerDocument
                {
                    OriginalFileName = safeOriginalFileName,
                    StoredFileName = uniqueFileName,
                    ContentType = _uploadModel.FileToUpload.ContentType ?? "application/octet-stream", // Get content type
                    FileSize = _uploadModel.FileToUpload.Size,
                    UploadTimestamp = DateTime.UtcNow,
                    Description = _uploadModel.Description?.Trim(), // Trim description
                    UploadedById = userId,
                    TargetUserId = userId // Assuming user uploads for themselves, adjust if needed
                // ProjectId = ... // Link to a specific project if applicable
                };

            DbContext.CustomerDocuments.Add(document);
            await DbContext.SaveChangesAsync();
            Logger.LogInformation("Database record created for file {OriginalFile}, ID: {DocumentId}", safeOriginalFileName, document.Id);


            // Reload the list to show the newly uploaded file
            await LoadUserDocuments(); // This re-queries the DB

            _uploadResultMessage = $"File '{safeOriginalFileName}' uploaded successfully.";
            _uploadSuccess = true;
            _uploadModel = new(); // Reset form model
        }
        catch (IOException ioEx) when (ioEx.Message.Contains("maximum allowed size"))
        {
            Logger.LogWarning(ioEx, "File upload failed for user {UserId} due to exceeding max size limit during stream.", userId);
            _uploadResultMessage = $"Error uploading file: The file size limit ({FormatFileSize(_maxFileSize)}) was exceeded.";
            _uploadSuccess = false;
            // Attempt to clean up partially written file if it exists and path is known
            if (filePath != null && File.Exists(filePath)) { try { File.Delete(filePath); } catch (Exception delEx) { Logger.LogError(delEx, "Failed to delete partial file {FilePath} after size error.", filePath); } }
        }
        catch (UnauthorizedAccessException authEx)
        {
            Logger.LogError(authEx, "File system permission error for user {UserId} attempting to write to {UserDirectory}", userId, userDirectory);
            _uploadResultMessage = "Server error: Unable to save file due to permissions.";
            _uploadSuccess = false;
        }
        catch (DbUpdateException dbEx)
        {
            Logger.LogError(dbEx, "Database error saving document record for user {UserId}, file {OriginalFile}", userId, _uploadModel.FileToUpload?.Name);
            _uploadResultMessage = "Server error: Could not save document information.";
            _uploadSuccess = false;
            // Attempt to clean up the orphaned file if it was saved
            if (filePath != null && File.Exists(filePath)) { try { File.Delete(filePath); Logger.LogWarning("Deleted orphaned file {FilePath} after DB error.", filePath); } catch (Exception delEx) { Logger.LogError(delEx, "Failed to delete orphaned file {FilePath} after DB error.", filePath); } }
        }
        catch (SecurityException secEx)
        {
            // Logged earlier where thrown
            _uploadResultMessage = $"Server security error: {secEx.Message}";
            _uploadSuccess = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error during file upload for user {UserId}, file {OriginalFile}", userId, _uploadModel.FileToUpload?.Name);
            _uploadResultMessage = $"An unexpected error occurred during upload: {ex.Message}";
            _uploadSuccess = false;
            // Attempt cleanup on general error as well
            if (filePath != null && File.Exists(filePath)) { try { File.Delete(filePath); Logger.LogWarning("Deleted file {FilePath} after general upload error.", filePath); } catch (Exception delEx) { Logger.LogError(delEx, "Failed to delete file {FilePath} after general upload error.", filePath); } }
        }
        finally
        {
            await InvokeAsync(StateHasChanged); // Update UI regardless of success/failure
        }
    }

    private string FormatFileSize(long bytes)
    {
        const long kilobyte = 1024;
        const long megabyte = kilobyte * 1024;
        const long gigabyte = megabyte * 1024;

        if (bytes < 0) return "Invalid size";
        if (bytes == 0) return "0 B";

        if (bytes < kilobyte) return $"{bytes} B";
        if (bytes < megabyte) return $"{(double)bytes / kilobyte:F1} KB";
        if (bytes < gigabyte) return $"{(double)bytes / megabyte:F1} MB";
        return $"{(double)bytes / gigabyte:F1} GB";
    }

    // Optional Download Method (not used with the direct link approach)
    // private async Task DownloadFile(int documentId)
    // {
    //     // This approach streams via Blazor Server signalR connection - not ideal for large files.
    //     // The API endpoint approach (`/download/{id}`) is generally preferred.
    //     // Placeholder - Implementation requires JSInterop call for browser download from stream.
    //     Logger.LogInformation("Download button clicked for document ID {DocumentId} (using Navigation)", documentId);
    //     NavigationManager.NavigateTo($"/download/{documentId}", forceLoad: true); // forceLoad initiates a full browser request
    // }
}