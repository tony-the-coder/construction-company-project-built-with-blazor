@page "/portal/documents-demo"
@inject ILogger<Document_demo> Logger
@inject IConfiguration Configuration

@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using System.ComponentModel.DataAnnotations

<PageTitle>Document Upload and View</PageTitle>

<h3 class="text-2xl font-semibold text-primary mb-6 font-serif">Document Upload and View</h3>

<div class="bg-white border border-subtle rounded-lg shadow-sm p-6 mb-8">
    <h4 class="text-xl font-semibold text-primary mb-4 font-serif">Upload New Document</h4>

    @if (!string.IsNullOrEmpty(_uploadResultMessage))
    {
        <div class="@(_uploadSuccess ? "bg-green-100 border border-green-400 text-green-700" : "bg-red-100 border border-red-400 text-red-700") px-4 py-3 rounded relative mb-4" role="alert">
            <span class="block sm:inline">@_uploadResultMessage</span>
        </div>
    }

    <EditForm Model="_uploadModel" OnValidSubmit="HandleFileUpload">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-4">
            <label for="documentFile" class="block text-sm font-medium text-gray-700 mb-1">Select File</label>
            <InputFile id="documentFile" OnChange="HandleFileSelected" class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none" />
            <ValidationMessage For="@(() => _uploadModel.FileToUpload)" />
            @if (_isFileLoading)
            {
                <p class="text-sm text-blue-600 mt-1">Processing file selection...</p>
            }
        </div>

        <div class="mb-4">
            <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
            <InputText id="description" @bind-Value="_uploadModel.Description" class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-accent focus:border-accent sm:text-sm" placeholder="E.g., Renovation Plans v1" />
            <ValidationMessage For="@(() => _uploadModel.Description)" />
        </div>

        <button type="submit" class="inline-flex items-center px-4 py-2 bg-primary border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed" disabled="@(_uploadModel.FileToUpload == null)">
            Upload Document
        </button>
    </EditForm>
</div>

<div class="bg-white border border-subtle rounded-lg shadow-sm p-6">
    <h4 class="text-xl font-semibold text-primary mb-4 font-serif">Uploaded Documents</h4>

    <p class="text-sm text-gray-600 mb-4">
        <strong>Upload Directory:</strong> <span class="text-blue-600">@_uploadDirectory</span>
    </p>

    @if (_uploadedFiles == null || !_uploadedFiles.Any())
    {
        <p class="text-secondary">No documents uploaded yet.</p>
    }
    else
    {
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">File Name</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Uploaded On</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Size</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var file in _uploadedFiles)
                    {
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@file.FileName</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@file.Description</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@file.UploadedOn.ToString("yyyy-MM-dd HH:mm")</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@FormatFileSize(file.Size)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private UploadModel _uploadModel = new();
    private bool _isFileLoading = false;
    private string? _uploadResultMessage;
    private bool _uploadSuccess;

    private List<UploadedFile> _uploadedFiles = new();

    private readonly string _uploadDirectory = @"C:\Users\tonyt\Desktop\Development\LehmanConstructionUploads";
    private readonly long _maxFileSize = 20 * 1024 * 1024; // 20 MB

    private class UploadModel
    {
        [Required(ErrorMessage = "Please select a file.")]
        public IBrowserFile? FileToUpload { get; set; }

        [StringLength(500, ErrorMessage = "Description cannot exceed 500 characters.")]
        public string? Description { get; set; }
    }

    private class UploadedFile
    {
        public string FileName { get; set; } = string.Empty;
        public string? Description { get; set; }
        public DateTime UploadedOn { get; set; }
        public long Size { get; set; }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        _isFileLoading = true;
        _uploadResultMessage = null;
        _uploadModel.FileToUpload = null;

        try
        {
            if (e.File != null)
            {
                _uploadModel.FileToUpload = e.File;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during file selection.");
            _uploadResultMessage = $"Error selecting file: {ex.Message}";
            _uploadSuccess = false;
        }
        finally
        {
            _isFileLoading = false;
        }
    }

    private async Task HandleFileUpload()
    {
        if (_uploadModel.FileToUpload == null)
        {
            _uploadResultMessage = "Please select a file.";
            _uploadSuccess = false;
            return;
        }

        try
        {
            if (!Directory.Exists(_uploadDirectory))
            {
                Directory.CreateDirectory(_uploadDirectory);
            }

            string uniqueFileName = $"{Guid.NewGuid()}{Path.GetExtension(_uploadModel.FileToUpload.Name)}";
            string filePath = Path.Combine(_uploadDirectory, uniqueFileName);

            await using FileStream fs = new(filePath, FileMode.Create);
            await _uploadModel.FileToUpload.OpenReadStream(_maxFileSize).CopyToAsync(fs);

            var uploadedFile = new UploadedFile
                {
                    FileName = _uploadModel.FileToUpload.Name,
                    Description = _uploadModel.Description,
                    UploadedOn = DateTime.Now,
                    Size = _uploadModel.FileToUpload.Size
                };

            _uploadedFiles.Add(uploadedFile);

            _uploadResultMessage = $"File '{_uploadModel.FileToUpload.Name}' uploaded successfully.";
            _uploadSuccess = true;

            _uploadModel = new();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during file upload.");
            _uploadResultMessage = $"Error uploading file: {ex.Message}";
            _uploadSuccess = false;
        }
    }

    private string FormatFileSize(long bytes)
    {
        const long kilobyte = 1024;
        const long megabyte = kilobyte * 1024;
        if (bytes < kilobyte) return $"{bytes} B";
        if (bytes < megabyte) return $"{(double)bytes / kilobyte:F1} KB";
        return $"{(double)bytes / megabyte:F1} MB";
    }
}

