@* File: Components/Public/Shared/ValueCard.razor (Example path) *@
@inject NavigationManager NavManager

<div class="flex flex-col items-center md:items-start text-center md:text-left p-4">
    @* Center on mobile, left-align on medium+ *@
    @* Icon Area *@
    @if (!string.IsNullOrWhiteSpace(IconSvgPath))
    {
        <div class="flex-shrink-0 mb-4">
            <div class="flex items-center justify-center h-12 w-12 rounded-md bg-indigo-500 dark:bg-indigo-600 text-white">
                @* Render SVG Icon *@
                <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="@IconSvgPath" />
                </svg>
            </div>
        </div>
    }

    @* Text Content *@
    <div>
        <h3 class="text-lg leading-6 font-semibold text-gray-900 dark:text-white">@Title</h3>
        <p class="mt-2 text-base text-gray-500 dark:text-gray-400">
            @Description
        </p>

        @* Optional Button/Link *@
        @if (!string.IsNullOrWhiteSpace(ButtonText) && !string.IsNullOrWhiteSpace(ButtonLink))
        {
            <div class="mt-4">
                <a href="@ButtonLink" @onclick:preventDefault="@(ButtonLink == "#")" @onclick="Navigate"
                   class="text-base font-medium text-indigo-600 dark:text-indigo-400 hover:text-indigo-800 dark:hover:text-indigo-300">
                    @ButtonText <span aria-hidden="true"> →</span>
                </a>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string? IconSvgPath { get; set; } // SVG path data (e.g., from Heroicons)
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Description { get; set; }
    [Parameter] public string? ButtonText { get; set; }
    [Parameter] public string? ButtonLink { get; set; }

    private void Navigate()
    {
        if (!string.IsNullOrWhiteSpace(ButtonLink) && ButtonLink != "#")
        {
            NavManager.NavigateTo(ButtonLink);
        }
        // Optionally handle '#' links differently if needed
    }
}