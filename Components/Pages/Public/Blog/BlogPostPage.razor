@page "/blog/{Slug}"
@layout MainLayout

@using LehmanCustomConstruction.Data.Blogs
@using LehmanCustomConstruction.Data.Blogs.Interfaces
@inject IBlogPostRepository BlogPostRepository
@inject NavigationManager NavigationManager

<PageTitle>@(_post?.Title ?? "Blog Post") | Lehman Custom Construction</PageTitle>

@* Apply the background color manually to the main container *@
<div class="bg-background min-h-screen">

    @if (_isLoading)
    {
        <p class="text-center text-secondary py-20"><em>Loading post...</em></p>
    }
    else if (_post == null)
    {
        <div class="text-center py-20 max-w-2xl mx-auto px-4">
            <h1 class="text-2xl font-semibold text-primary mb-4 font-serif">Post Not Found</h1>
            <p class="text-secondary font-sans">Sorry, the blog post you requested could not be found or is not published.</p>
            <a href="/blog" class="mt-6 inline-block text-accent hover:underline font-sans">Return to Blog List</a>
        </div>
    }
    else
    {
        <article class="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8">

            <header class="mb-8 border-b border-subtle pb-8">

                @if (!string.IsNullOrWhiteSpace(_post.ImageUrl))
                {
                    <div class="mb-8">
                        <img class="w-full h-auto max-h-[50vh] object-cover rounded-lg shadow-md"
                             src="@_post.ImageUrl"
                             alt="@($"Featured image for {_post.Title}")"
                             loading="lazy" />
                    </div>
                }

                <h1 class="text-3xl font-bold tracking-tight text-primary sm:text-4xl mb-4 font-serif">
                    @_post.Title
                </h1>

                <div class="text-sm text-secondary flex flex-wrap items-center gap-x-4 gap-y-1 font-sans">
                    <time datetime="@_post.PublishDate.ToString("yyyy-MM-dd")">
                        Published on @(_post.PublishDate.ToString("MMMM d, yyyy"))
                    </time>
                    @if (!string.IsNullOrWhiteSpace(_post.Author))
                    {
                        <span>by <span class="font-medium text-primary">@_post.Author</span></span>
                    }
                    @if (_post.BlogPostCategories?.Any() == true)
                    {
                        <div class="flex items-center gap-x-2">
                            <span>| Categories:</span>
                            <span class="space-x-2">
                                @foreach (var postCategory in _post.BlogPostCategories)
                                {
                                    <a href="@($"/blog/category/{postCategory.BlogCategory?.Slug}")"
                                       class="text-accent hover:underline">
                                        @postCategory.BlogCategory?.Name
                                    </a>
                                }
                            </span>
                        </div>
                    }
                </div>
            </header>

            @* Main Content Body - Apply null check for content *@
            <div class="prose prose-lg max-w-none mt-8">
                @((MarkupString)(_post.Content ?? string.Empty)) @* <<< FIXED HERE *@
            </div>

            <footer class="mt-12 pt-8 border-t border-subtle">
                <a href="/blog" class="text-accent hover:underline font-sans">← Back to Blog List</a>
            </footer>
        </article>
    }
</div>


@code {
    [Parameter]
    public string? Slug { get; set; }

    // Use the actual type from your Data namespace
    private LehmanCustomConstruction.Data.Blogs.BlogPost? _post;
    private bool _isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(Slug))
        {
            _isLoading = true;
            _post = null;
            try
            {
                _post = await BlogPostRepository.GetPublishedPostBySlugAsync(Slug);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading published blog post by slug '{Slug}': {ex.Message}");
                _post = null;
            }
            finally
            {
                _isLoading = false;
            }
        }
        else
        {
            _isLoading = false;
            _post = null;
        }
    }

    // Placeholder classes removed - ensure using directives are correct at the top
}