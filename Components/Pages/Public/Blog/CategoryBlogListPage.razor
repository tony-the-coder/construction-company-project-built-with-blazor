@page "/blog/category/{CategorySlug}" 
@layout MainLayout

@using LehmanCustomConstruction.Data.Blogs
@using LehmanCustomConstruction.Data.Blogs.Interfaces
@inject IBlogPostRepository BlogPostRepository
@inject IBlogCategoryRepository CategoryRepository 
@inject NavigationManager NavigationManager

<PageTitle>@(_categoryName ?? "Category") Blog Posts | Lehman Custom Construction</PageTitle>

@* --- Page Header --- *@
<div class="bg-gray-100 dark:bg-gray-800 py-12 mb-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h1 class="text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl">
            Blog Posts: @(_categoryName ?? CategorySlug) @* Show name or slug *@
        </h1>
        @if (!string.IsNullOrWhiteSpace(_categoryName))
        {
             <p class="mt-3 max-w-2xl mx-auto text-xl text-gray-500 dark:text-gray-400 sm:mt-4">
                Insights related to @(_categoryName).
             </p>
        }
    </div>
</div>
@* ----------------- *@

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    @if (_isLoading)
    {
        <p class="text-center text-gray-500 dark:text-gray-400"><em>Loading posts...</em></p>
    }
    else if (_categoryNotFound) // Check if category itself wasn't found
    {
        <div class="text-center py-10">
             <h2 class="text-xl font-semibold text-gray-700 dark:text-gray-300 mb-4">Category Not Found</h2>
             <p class="text-gray-500 dark:text-gray-400">Sorry, the category '@CategorySlug' does not exist.</p>
             <a href="/blog" class="mt-4 inline-block text-indigo-600 hover:text-indigo-800 dark:text-indigo-400 dark:hover:text-indigo-300">Return to Blog List</a>
        </div>
    }
    else if (_filteredPosts == null || !_filteredPosts.Any())
    {
        <p class="text-center text-gray-500 dark:text-gray-400"><em>No published blog posts found in the '@(_categoryName ?? CategorySlug)' category.</em></p>
    }
    else
    {
        @* Reuse the grid layout and card component *@
        <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
            @foreach (var post in _filteredPosts)
            {
                <BlogPostCard Post="post" /> @* Reuse the card component *@
            }
        </div>
        @* TODO: Add Pagination for category lists *@
    }
</div>


@code {
    [Parameter]
    public string? CategorySlug { get; set; } // Capture slug from route

    private IEnumerable<BlogPost>? _filteredPosts;
    private string? _categoryName;
    private bool _isLoading = true;
    private bool _categoryNotFound = false;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(CategorySlug))
        {
            _isLoading = true;
            _categoryNotFound = false; // Reset flag
            _filteredPosts = null;
            _categoryName = null;
            StateHasChanged(); // Update UI to show loading

            try
            {
                // 1. Try to find the category by slug to get its name and verify existence
                var category = await CategoryRepository.GetBySlugAsync(CategorySlug);
                if (category == null)
                {
                    _categoryNotFound = true; // Mark category as not found
                }
                else
                {
                    _categoryName = category.Name;
                    // 2. If category exists, load posts for that category
                    _filteredPosts = await BlogPostRepository.GetPublishedPostsByCategorySlugAsync(CategorySlug);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading posts for category '{CategorySlug}': {ex.Message}");
                // Handle error appropriately (e.g., show error message)
                _filteredPosts = Enumerable.Empty<BlogPost>();
            }
            finally
            {
                _isLoading = false;
            }
        }
        else
        {
             // Handle case where slug is missing/invalid (e.g., redirect to /blog)
             NavigationManager.NavigateTo("/blog");
        }
    }
}