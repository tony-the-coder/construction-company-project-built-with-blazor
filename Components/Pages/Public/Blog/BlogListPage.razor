@page "/blog"
@layout MainLayout

@* @using LehmanCustomConstruction.Data.Blogs *@
@* @using LehmanCustomConstruction.Data.Blogs.Interfaces *@
@inject IBlogPostRepository BlogPostRepository
@inject NavigationManager NavigationManager

<PageTitle>Lehman Custom Construction Blog</PageTitle>

@* --- Page Header --- *@
@* Removed specific background, let it inherit. Added text colors. Apply heading font. *@
<div class="py-12 mb-16">
    @* Increased bottom margin *@
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h1 class="text-3xl font-bold tracking-tight text-primary sm:text-4xl font-serif">
            Construction Insights & News
        </h1>
        <p class="mt-3 max-w-2xl mx-auto text-xl text-secondary sm:mt-4 font-sans">
            Stay updated with the latest projects, tips, and news from Lehman Custom Construction.
        </p>
    </div>
</div>
@* ----------------- *@

@* --- Main Content Area --- *@
@* Apply the background color manually here as a workaround. Add padding below. *@
<div class="bg-background pb-16">
    @* ADDED bg-background and pb-16 *@
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        @if (_isLoading) // Use the boolean flag directly
        {
            @* Apply secondary text color for loading message *@
            <p class="text-center text-secondary"><em>Loading posts...</em></p>
            @* TODO: Add a nicer loading spinner later using theme colors *@
        }
        else if (publishedPosts == null || !publishedPosts.Any()) // Handle null check here too
        {
            @* Apply secondary text color for empty message *@
            <p class="text-center text-secondary"><em>No published blog posts found yet. Check back soon!</em></p>
        }
        else
        {
            @* Grid structure remains the same - styling is inside BlogPostCard *@
            <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
                @foreach (var post in publishedPosts)
                {
                    <BlogPostCard Post="post" /> @* Ensure this component is also updated with theme colors *@
                }
            </div>

            @* TODO: Add Pagination controls here later *@
        }
    </div>
</div>
@* ----------------------- *@


@code {
    private IEnumerable<BlogPost>? publishedPosts;
    private bool _isLoading = true; // Default to true

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true; // Explicitly set loading true at start
        try
        {
            publishedPosts = await BlogPostRepository.GetAllAsync(publishedOnly: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading published blog posts: {ex.Message}");
            publishedPosts = Enumerable.Empty<BlogPost>(); // Ensure it's not null on error
        }
        finally
        {
            _isLoading = false; // Set loading false when done (success or error)
            // No need to call StateHasChanged() here usually, framework handles it after OnInitializedAsync
        }
    }
}