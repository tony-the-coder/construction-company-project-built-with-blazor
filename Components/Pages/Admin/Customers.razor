@page "/admin/customers"
@layout AdminLayout // Use the admin layout

@inject ApplicationDbContext DbContext // Inject your DbContext
@inject NavigationManager NavigationManager // To navigate to detail page
@inject ILogger<Customers> Logger // For logging


@using LehmanCustomConstruction.Data 
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Radzen
@using Radzen.Blazor

<PageTitle>Manage Customers</PageTitle>

<h3 class="text-2xl font-semibold text-gray-100 mb-6 font-serif">Manage Customers</h3>

<div class="bg-white border border-subtle rounded-lg shadow-sm p-6">
    @if (_isLoading)
    {
        <p><em>Loading customers...</em></p>
    }
    else if (_loadError != null)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <span class="block sm:inline">Error loading customers: @_loadError</span>
        </div>
    }
    else if (_customers == null || !_customers.Any())
    {
        <p class="text-secondary">No customers found.</p>
    }
    else
    {
        <RadzenDataGrid Data="@_customers" TItem="CustomerViewModel" AllowSorting="true" AllowPaging="true" PageSize="15"
                        PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        Density="Density.Compact" Style="width: 100%;" EmptyText="No customers match filter.">
            <Columns>
                <RadzenDataGridColumn TItem="CustomerViewModel" Property="UserName" Title="Username" Width="180px" />
                <RadzenDataGridColumn TItem="CustomerViewModel" Property="Email" Title="Email" Width="220px" />
                @* --- Counts documents where the user is the TARGET --- *@
                <RadzenDataGridColumn TItem="CustomerViewModel" Property="DocumentCount" Title="Docs" Width="80px" TextAlign="TextAlign.Center" Sortable="false" Filterable="false" />
                <RadzenDataGridColumn TItem="CustomerViewModel" Title="Actions" Width="150px" Sortable="false" Filterable="false" TextAlign="TextAlign.Center">
                    <Template Context="customer">
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="folder_open" Size="ButtonSize.Small"
                                      Click=@(() => ViewCustomerDocuments(customer.Id)) Text="Documents" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>

@code {
    private List<CustomerViewModel>? _customers;
    private bool _isLoading = true;
    private string? _loadError = null;

    // Simple ViewModel to hold customer data for the grid
    private class CustomerViewModel
    {
        public required string Id { get; set; }
        public string? UserName { get; set; }
        public string? Email { get; set; }
        public int DocumentCount { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _loadError = null;
        try
        {
            // --- CHANGED: Query ApplicationUser via DbContext.Users ---
            // Count documents where TargetUserId matches the user's ID
            _customers = await DbContext.Users // This DbContext property returns DbSet<ApplicationUser>
                .OrderBy(u => u.UserName)
                .Select(u => new CustomerViewModel
                    {
                        Id = u.Id,
                        UserName = u.UserName,
                        Email = u.Email,
                    // Count documents where this user is the target recipient
                        DocumentCount = DbContext.CustomerDocuments.Count(d => d.TargetUserId == u.Id)
                    })
                .ToListAsync();

            Logger.LogInformation("Successfully loaded {CustomerCount} customers.", _customers?.Count ?? 0);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading customers from database.");
            _loadError = "Could not retrieve customer list from the database.";
            _customers = new List<CustomerViewModel>(); // Ensure list is not null
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ViewCustomerDocuments(string customerId)
    {
        if (string.IsNullOrEmpty(customerId))
        {
            Logger.LogWarning("Attempted to view documents for null or empty customerId.");
            return; // Or show an error notification
        }
        Logger.LogInformation("Navigating to document management page for customer ID: {CustomerId}", customerId);
        NavigationManager.NavigateTo($"/admin/customer-documents/{customerId}");
    }
}