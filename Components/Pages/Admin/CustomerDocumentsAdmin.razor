@* File: Components/Pages/Admin/CustomerDocumentsAdmin.razor *@
@page "/admin/customer-documents/{CustomerId}"
@layout AdminLayout
@rendermode InteractiveServer

@* --- AUTHORIZATION TEMPORARILY DISABLED FOR DEMO --- *@
@* @attribute [Authorize(Roles = "Admin")] *@
@* --- REMEMBER TO RE-ENABLE AUTHORIZATION AFTER DEMO --- *@

@* Using Statements *@
@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Text.Json;
@using System.Net.Http; // <<< ADDED THIS LINE
@using LehmanCustomConstruction.Data
@using LehmanCustomConstruction.Data.Common
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Logging
@using Radzen
@using Radzen.Blazor
@*@using Microsoft.AspNetCore.Authorization*@

@* Service Injections *@
@inject ApplicationDbContext DbContext
@inject ILogger<CustomerDocumentsAdmin> Logger
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject IConfiguration Configuration
@inject NotificationService NotificationService

@* --- CSS STYLES FOR DRAG & DROP ZONE --- *@
<style>
    #adminUploadWithDragAndDrop { min-height: 200px; border: 2px dashed var(--rz-border-base-color, #dee2e6); /*...*/ }
    #adminUploadWithDragAndDrop.rz-fileupload-highlight { background-color: var(--rz-primary-lighter, #cfe2ff) !important; /*...*/ }
    #adminUploadWithDragAndDrop .rz-fileupload-choose { background-color: transparent !important; /*...*/ }
    #adminUploadWithDragAndDrop .rz-fileupload-choose span { margin: 0 !important; }
    #adminUploadWithDragAndDrop .rz-fileupload-content { padding: 0.5rem; border: none; }
    #adminUploadWithDragAndDrop .rz-fileupload-row > div { padding: 0.3rem 0.5rem; }
    #adminUploadWithDragAndDrop .rz-progressbar { height: 6px; }
</style>

<PageTitle>Manage Documents for Customer</PageTitle>

@if (_isLoading) { <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" /><p><em>Loading...</em></p> }
else if (_customer == null) { <div class="rz-card card rz-shadow-3 rz-my-12" style="padding: 2rem;"><!-- Error Display --></div> }
else {
    @* --- Customer Header --- *@
    <h3 class="text-2xl font-semibold text-primary dark:text-gray-100 mb-2 font-serif">Manage Documents for: @_customer.UserName</h3>
    <p class="text-secondary dark:text-gray-400 mb-6">ID: @_customer.Id | Email: @_customer.Email</p>

    @* --- Admin Upload Section (Using Radzen Example UI) --- *@
    <RadzenCard Variant="Variant.Outlined" class="mb-8">
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="mb-4">Upload Document(s) for Customer (Drag & Drop)</RadzenText>
        <RadzenUpload id="adminUploadWithDragAndDrop" @ref="uploadComponent"
                      ChooseText="Drag and Drop files here or Click to Browse"
                      Accept="@_allowedExtensionsString" Url="@UploadUrl" Multiple="true" Auto="false"
                      Style="width: 100%; margin-bottom: 1rem;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})"
                      Progress=@OnUploadProgress Complete=@OnUploadComplete Error=@OnUploadError />
        <RadzenButton Text="Upload Selected Files" Click=@TriggerUpload class="rz-mt-2" ButtonStyle="ButtonStyle.Success" Icon="upload" IsBusy=@isUploading Disabled=@isUploading />
         @if(isUploading || uploadProgress > 0) { <RadzenProgressBar Value="@uploadProgress" Unit="%" Visible="@(isUploading || uploadProgress > 0)" Style="margin-top: 1rem;" /> }
    </RadzenCard>

    @* --- Existing Documents Grid --- *@
    <div class="bg-white dark:bg-gray-800 border border-subtle dark:border-gray-700 rounded-lg shadow-sm p-6">
        <h4 class="text-xl font-semibold text-primary dark:text-gray-100 mb-4 font-serif">Active Documents</h4>
        <RadzenDataGrid Data="@_documents" TItem="CustomerDocument" AllowSorting="true" AllowPaging="true" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Density="Density.Compact" Style="width: 100%;" EmptyText="No active documents found for this customer." IsLoading="@_isLoadingDocuments" PagerAlwaysVisible="true" PageSizeOptions="new int[] { 5, 10, 20, 50 }">
             <Columns>
                 <RadzenDataGridColumn TItem="CustomerDocument" Property="OriginalFileName" Title="File Name" Width="250px" />
                 <RadzenDataGridColumn TItem="CustomerDocument" Property="UploadTimestamp" Title="Uploaded On" FormatString="{0:yyyy-MM-dd HH:mm}" Width="160px" TextAlign="TextAlign.Center" />
                 <RadzenDataGridColumn TItem="CustomerDocument" Title="Size" Property="FileSize" Sortable="true" Filterable="false" Width="100px" TextAlign="TextAlign.Right"><Template Context="doc"> @FormatFileSize(doc.FileSize) </Template></RadzenDataGridColumn>
                 <RadzenDataGridColumn TItem="CustomerDocument" Property="Description" Title="Description" Width="200px" />
                 <RadzenDataGridColumn TItem="CustomerDocument" Title="Uploaded By ID" Property="UploadedById" Width="150px" Visible="true"><Template Context="doc"> <span class="text-xs text-secondary dark:text-gray-400">@doc.UploadedById</span> </Template></RadzenDataGridColumn>
                 <RadzenDataGridColumn TItem="CustomerDocument" Title="Actions" Sortable="false" Filterable="false" Width="160px" TextAlign="TextAlign.Center">
                     <Template Context="doc">
                         <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="download" Size="ButtonSize.Small" Click=@(() => NavigationManager.NavigateTo($"/download/{doc.Id}", forceLoad: true)) class="rz-mr-1" />
                         <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Click=@(args => ConfirmDeleteDocument(doc)) />
                     </Template>
                 </RadzenDataGridColumn>
             </Columns>
        </RadzenDataGrid>
    </div>
}

@code {
    [Parameter] public string CustomerId { get; set; } = string.Empty;
    private ApplicationUser? _customer;
    private List<CustomerDocument>? _documents;
    private bool _isLoading = true;
    private bool _isLoadingDocuments = false;
    private RadzenUpload? uploadComponent;
    private bool isUploading = false;
    private int uploadProgress = 0;
    private string UploadUrl => $"api/upload/admin/{CustomerId}";
    private readonly string _allowedExtensionsString = string.Join(",", new List<string> { ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".txt", ".csv", ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tif", ".tiff", ".webp" });

    protected override async Task OnParametersSetAsync() { if (string.IsNullOrEmpty(CustomerId) || !Guid.TryParse(CustomerId, out _)) { Logger.LogError("Admin Docs: Invalid Customer ID '{RawCustomerId}'", CustomerId); _customer = null; _isLoading = false; return; } await LoadCustomerData(); }
    private async Task LoadCustomerData() { _isLoading = true; _isLoadingDocuments = true; await InvokeAsync(StateHasChanged); try { _customer = await DbContext.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == CustomerId); if (_customer != null) { _documents = await DbContext.CustomerDocuments.Where(d => d.TargetUserId == CustomerId && !d.IsDeleted).OrderByDescending(d => d.UploadTimestamp).AsNoTracking().ToListAsync(); Logger.LogInformation("Loaded {DocCount} docs for admin view of {CustomerId}", _documents?.Count ?? 0, CustomerId); } else { Logger.LogWarning("Admin Docs: Customer {CustomerId} not found.", CustomerId); _documents = new List<CustomerDocument>(); } } catch (Exception ex) { Logger.LogError(ex, "Admin Docs: Error loading data for {CustomerId}", CustomerId); NotificationService.Notify(NotificationSeverity.Error, "Load Error", $"Failed data load: {ex.Message}"); _customer = null; _documents = null; } finally { _isLoading = false; _isLoadingDocuments = false; await InvokeAsync(StateHasChanged); } }
    private string FormatFileSize(long bytes) { const long k=1024,m=k*k,g=m*k;if(bytes<0)return "?";if(bytes==0)return "0 B";if(bytes<k)return $"{bytes} B";if(bytes<m)return $"{(double)bytes/k:F1} KB";if(bytes<g)return $"{(double)bytes/m:F1} MB";return $"{(double)bytes/g:F1} GB"; }
    private async Task ConfirmDeleteDocument(CustomerDocument docToDelete) { if (docToDelete == null) return; var confirmed = await DialogService.Confirm($"Mark '{docToDelete.OriginalFileName}' as deleted?", "Confirm Deletion", new ConfirmOptions { OkButtonText = "Yes, Mark Deleted", CancelButtonText = "No, Cancel" }); if (confirmed == true) { await DeleteDocument(docToDelete); } }
    private async Task DeleteDocument(CustomerDocument docToDelete) { _isLoadingDocuments = true; await InvokeAsync(StateHasChanged); try { var trackedDoc = await DbContext.CustomerDocuments.FindAsync(docToDelete.Id); if (trackedDoc == null || trackedDoc.IsDeleted) { Logger.LogWarning("Soft Delete skipped: Doc ID {DocId} not found or already deleted.", docToDelete.Id); NotificationService.Notify(NotificationSeverity.Info, "Skipped", "Document not found or already deleted."); return; } trackedDoc.IsDeleted = true; await DbContext.SaveChangesAsync(); Logger.LogInformation("Soft-deleted doc ID {DocId}", trackedDoc.Id); NotificationService.Notify(NotificationSeverity.Success, "Success", $"Document '{trackedDoc.OriginalFileName}' marked as deleted."); await LoadCustomerData(); } catch (Exception ex) { Logger.LogError(ex, "Error during soft delete for doc ID {DocId}", docToDelete.Id); NotificationService.Notify(NotificationSeverity.Error,"Delete Error", $"Error deleting document: {ex.Message}"); } finally { _isLoadingDocuments = false; await InvokeAsync(StateHasChanged); } }
    void TriggerUpload() { if (uploadComponent == null) { NotificationService.Notify(NotificationSeverity.Error, "Error", "Upload component error."); return; } Logger.LogInformation("Admin triggering upload to {UploadUrl}", UploadUrl); isUploading = true; uploadProgress = 0; InvokeAsync(StateHasChanged); uploadComponent.Upload(); }
    void OnUploadProgress(UploadProgressArgs args) { uploadProgress = args.Progress; if (args.Progress == 100) { Logger.LogInformation("Admin upload transfer complete for {FileCount} files.", args.Files.Count()); } InvokeAsync(StateHasChanged); }
    // --- CORRECTED OnUploadComplete ---
    async Task OnUploadComplete(UploadCompleteEventArgs args)
    {
        isUploading = false; uploadProgress = 0; string serverMessage = "Upload processed.";
        // Access response properties directly from args.RawResponse (HttpResponseMessage)
        bool serverSuccess = args.RawResponse.IsSuccessStatusCode;
        System.Net.HttpStatusCode statusCode = args.RawResponse.StatusCode; // Get status code

        try { if (args.JsonResponse?.RootElement.TryGetProperty("message", out var msg) == true) serverMessage = msg.GetString() ?? serverMessage; } catch (Exception ex) { Logger.LogWarning(ex, "Could not parse JSON message from admin upload response."); }

        if (serverSuccess)
        {
             Logger.LogInformation("Admin upload successful. Status: {StatusCode}", statusCode);
             NotificationService.Notify(NotificationSeverity.Success, "Upload Complete", serverMessage);
             await LoadCustomerData();
        }
        else
        {
             Logger.LogError("Admin upload failed. Status: {StatusCode}, Response: {Response}", statusCode, args.RawResponse);
             NotificationService.Notify(NotificationSeverity.Error, "Upload Failed", serverMessage);
        }
        if (uploadComponent != null && serverSuccess) { /* uploadComponent.Clear(); */ }
        await InvokeAsync(StateHasChanged);
    }
    void OnUploadError(UploadErrorEventArgs args) { Logger.LogError("Admin Upload Client Error: {Message}", args.Message); NotificationService.Notify(NotificationSeverity.Error, "Upload Error", $"Could not upload: {args.Message}"); isUploading = false; uploadProgress = 0; InvokeAsync(StateHasChanged); }
}