@* File: Components/Pages/Admin/CustomerDocumentsAdmin.razor *@
@page "/admin/customer-documents/{CustomerId}"
@layout AdminLayout
@rendermode InteractiveServer

@* --- AUTHORIZATION TEMPORARILY DISABLED FOR DEMO --- *@
@* @attribute [Authorize(Roles = "Admin")] *@
@* --- REMEMBER TO RE-ENABLE AUTHORIZATION AFTER DEMO --- *@

@* Using Statements *@
@using System.ComponentModel.DataAnnotations
@using System.IO
@using LehmanCustomConstruction.Data
@using LehmanCustomConstruction.Data.Common
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Logging
@using Radzen
@using Radzen.Blazor
@*@using Microsoft.AspNetCore.Authorization*@

@* Service Injections *@
@inject ApplicationDbContext DbContext
@inject ILogger<CustomerDocumentsAdmin> Logger
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject IConfiguration Configuration
@inject NotificationService NotificationService
@* Remove AuthenticationStateProvider Injection *@
@* @inject AuthenticationStateProvider AuthenticationStateProvider *@


<PageTitle>Manage Documents for Customer</PageTitle>

@* --- Loading and Error States --- *@
@if (_isLoading)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />

    <p><em>Loading...</em></p>
}
else if (_customer == null)
{
     <div class="rz-card card rz-shadow-3 rz-my-12" style="padding: 2rem;"><!-- Error Display --></div>
}
else
{
    @* --- Customer Header --- *@
    <h3 class="text-2xl font-semibold text-primary dark:text-gray-100 mb-2 font-serif">Manage Documents for: @_customer.UserName</h3>
    <p class="text-secondary dark:text-gray-400 mb-6">ID: @_customer.Id | Email: @_customer.Email</p>

    @* --- Admin Upload Section --- *@
    <div class="bg-white dark:bg-gray-800 border border-subtle dark:border-gray-700 rounded-lg shadow-sm p-6 mb-8">
        <h4 class="text-xl font-semibold text-primary dark:text-gray-100 mb-4 font-serif">Upload Document for Customer</h4>
        <EditForm Model="adminUploadModel" OnValidSubmit="HandleAdminUpload">
            <DataAnnotationsValidator />
            <!-- File Input -->
            <div class="mb-4">
                <label class="block text-sm font-medium text-primary dark:text-gray-300 mb-1">Select File</label>
                <InputFile OnChange="LoadFile" class="block w-full text-sm text-gray-500 dark:text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-accent/10 dark:file:bg-accent/20 file:text-accent dark:file:text-accent/90 hover:file:bg-accent/20 dark:hover:file:bg-accent/30" />
                @if (selectedFile != null)
                {
                    <p class="mt-1 text-xs text-secondary dark:text-gray-400">Selected: @selectedFile.Name (@FormatFileSize(selectedFile.Size))</p>
                }
                else
                {
                    long maxFileSizeMB = Configuration.GetValue<long>("FileUploadSettings:MaxFileSizeMB", 20);
                    <p class="mt-1 text-xs text-secondary dark:text-gray-400">Max size: @maxFileSizeMB MB.</p>
                }
            </div>
            <!-- Description Input -->
            <div class="mb-4">
                <label for="adminDocDescription" class="block text-sm font-medium text-primary dark:text-gray-300">Description (Optional)</label>
                <InputText id="adminDocDescription" @bind-Value="adminUploadModel.Description" placeholder="Enter a brief description..." class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-accent focus:ring-accent sm:text-sm bg-white dark:bg-gray-700 text-primary dark:text-gray-100 placeholder-gray-400 dark:placeholder-gray-500" />
                <ValidationMessage For="@(() => adminUploadModel.Description)" class="text-red-600 dark:text-red-400 text-xs mt-1" />
            </div>
            <!-- Submit Button -->
            <button type="submit" disabled="@(isUploading || selectedFile == null)" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-accent hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800 focus:ring-accent disabled:opacity-50 disabled:cursor-not-allowed">
                @if (isUploading)
                {
                    <!-- Uploading SVG -->

                    <span>Uploading...</span>
                }
                else
                {
                    <!-- Upload SVG -->

                    <span>Upload Document</span>
                }
            </button>
        </EditForm>
        <!-- Feedback Messages -->
        @if (!string.IsNullOrEmpty(_userFeedbackMessage))
        {
            <div class="@(_feedbackSuccess ? "mt-4 bg-green-100..." : "mt-4 bg-red-100...")" role="alert"><span class="block sm:inline">@_userFeedbackMessage</span></div>
        }
    </div>

    @* --- Existing Documents Grid --- *@
    <div class="bg-white dark:bg-gray-800 border border-subtle dark:border-gray-700 rounded-lg shadow-sm p-6">
        <h4 class="text-xl font-semibold text-primary dark:text-gray-100 mb-4 font-serif">Active Documents</h4>
        <RadzenDataGrid Data="@_documents" TItem="CustomerDocument" AllowSorting="true" AllowPaging="true" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Density="Density.Compact" Style="width: 100%;" EmptyText="No active documents found for this customer." IsLoading="@_isLoadingDocuments" PagerAlwaysVisible="true" PageSizeOptions="new int[] { 5, 10, 20, 50 }">
            <Columns>
                <!-- Grid Columns (unchanged from previous version) -->
                <RadzenDataGridColumn TItem="CustomerDocument" Property="OriginalFileName" Title="File Name" Width="250px" />
                <RadzenDataGridColumn TItem="CustomerDocument" Property="UploadTimestamp" Title="Uploaded On" FormatString="{0:yyyy-MM-dd HH:mm}" Width="160px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="CustomerDocument" Title="Size" Property="FileSize" Sortable="true" Filterable="false" Width="100px" TextAlign="TextAlign.Right"><Template Context="doc"> @FormatFileSize(doc.FileSize) </Template></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CustomerDocument" Property="Description" Title="Description" Width="200px" />
                <RadzenDataGridColumn TItem="CustomerDocument" Title="Uploaded By ID" Property="UploadedById" Width="150px" Visible="true"><Template Context="doc"> <span class="text-xs text-secondary dark:text-gray-400">@doc.UploadedById</span> </Template></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CustomerDocument" Title="Actions" Sortable="false" Filterable="false" Width="160px" TextAlign="TextAlign.Center">
                    <Template Context="doc">
                        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="download" Size="ButtonSize.Small" Click=@(() => NavigationManager.NavigateTo($"/download/{doc.Id}", forceLoad: true)) class="rz-mr-1" />
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Click=@(args => ConfirmDeleteDocument(doc)) />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
}

@code {
    [Parameter]
    public string CustomerId { get; set; } = string.Empty;

    // State Variables...
    private ApplicationUser? _customer;
    private List<CustomerDocument>? _documents;
    private bool _isLoading = true;
    private bool _isLoadingDocuments = false;
    private IBrowserFile? selectedFile;
    private bool isUploading = false;
    private UploadModel adminUploadModel = new UploadModel();
    private string? _userFeedbackMessage;
    private bool _feedbackSuccess;

    // --- Placeholder Admin ID Reintroduced ---
    private const string PlaceholderAdminId = "683a96be-9b4a-4af7-a863-b98a88815cae"; // Using test4@test.com ID

    // Upload Form Model...
    private class UploadModel { [MaxLength(500)] public string? Description { get; set; } }

    // Lifecycle Methods...
    protected override async Task OnParametersSetAsync() { await LoadCustomerData(); }

    // Data Loading (unchanged)...
    private async Task LoadCustomerData() { /* ... Same logic as before ... */ _isLoading = true; _isLoadingDocuments = true; _userFeedbackMessage = null; await InvokeAsync(StateHasChanged); if (string.IsNullOrEmpty(CustomerId)) { _isLoading = false; _isLoadingDocuments = false; _userFeedbackMessage = "Error: No Customer ID provided."; _feedbackSuccess = false; await InvokeAsync(StateHasChanged); return; } try { _customer = await DbContext.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == CustomerId); if (_customer != null) { _documents = await DbContext.CustomerDocuments.Where(d => d.TargetUserId == CustomerId && !d.IsDeleted).OrderByDescending(d => d.UploadTimestamp).AsNoTracking().ToListAsync(); Logger.LogInformation("Loaded {DocCount} non-deleted docs for customer {CustomerId}", _documents?.Count ?? 0, CustomerId); } else { Logger.LogWarning("Customer {CustomerId} not found.", CustomerId); _documents = new List<CustomerDocument>(); } } catch (Exception ex) { Logger.LogError(ex, "Error loading data for customer {CustomerId}", CustomerId); NotificationService.Notify(NotificationSeverity.Error, "Load Error", $"Failed to load data: {ex.Message}"); _customer = null; _documents = null; _userFeedbackMessage = "Error loading data."; _feedbackSuccess = false; } finally { _isLoading = false; _isLoadingDocuments = false; await InvokeAsync(StateHasChanged); } }

    // File Size Formatting...
    private string FormatFileSize(long bytes) { /* ... Same logic ... */ const long k = 1024, m = k * k, g = m * k; if (bytes < 0) return "?"; if (bytes == 0) return "0 B"; if (bytes < k) return $"{bytes} B"; if (bytes < m) return $"{(double)bytes / k:F1} KB"; if (bytes < g) return $"{(double)bytes / m:F1} MB"; return $"{(double)bytes / g:F1} GB"; }

    // Delete Logic (Soft Delete)...
    private async Task ConfirmDeleteDocument(CustomerDocument docToDelete) { /* ... Same logic ... */ if (docToDelete == null) return; var confirmed = await DialogService.Confirm($"Mark '{docToDelete.OriginalFileName}' as deleted?", "Confirm Deletion", new ConfirmOptions { OkButtonText = "Yes, Mark Deleted", CancelButtonText = "No, Cancel" }); if (confirmed == true) { await DeleteDocument(docToDelete); } }
    private async Task DeleteDocument(CustomerDocument docToDelete) { /* ... Same logic (keeps file) ... */ _isLoadingDocuments = true; _userFeedbackMessage = null; _feedbackSuccess = false; await InvokeAsync(StateHasChanged); try { var trackedDoc = await DbContext.CustomerDocuments.FindAsync(docToDelete.Id); if (trackedDoc == null) { Logger.LogWarning("Soft Delete failed: Doc ID {DocId} not found.", docToDelete.Id); NotificationService.Notify(NotificationSeverity.Error, "Delete Error", "Document not found."); return; } if (trackedDoc.IsDeleted) { Logger.LogInformation("Doc ID {DocId} already soft-deleted.", trackedDoc.Id); NotificationService.Notify(NotificationSeverity.Info, "Already Deleted", "Document was already marked as deleted."); return; } trackedDoc.IsDeleted = true; await DbContext.SaveChangesAsync(); Logger.LogInformation("DB record soft-deleted for doc ID {DocId}", trackedDoc.Id); _feedbackSuccess = true; _userFeedbackMessage = $"Document '{trackedDoc.OriginalFileName}' marked as deleted."; NotificationService.Notify(NotificationSeverity.Success, "Success", _userFeedbackMessage); await LoadCustomerData(); } catch (DbUpdateException dbEx) { Logger.LogError(dbEx, "DB error during soft delete for doc ID {DocId}", docToDelete.Id); NotificationService.Notify(NotificationSeverity.Error, "DB Delete Error", $"Database error: {dbEx.InnerException?.Message ?? dbEx.Message}"); _userFeedbackMessage = "Database error during delete."; _feedbackSuccess = false; } catch (Exception ex) { Logger.LogError(ex, "Error during soft delete for doc ID {DocId}", docToDelete.Id); NotificationService.Notify(NotificationSeverity.Error, "Delete Error", $"An unexpected error occurred: {ex.Message}"); _userFeedbackMessage = "Unexpected error during delete."; _feedbackSuccess = false; } finally { _isLoadingDocuments = false; await InvokeAsync(StateHasChanged); } }

    // Upload Logic...
    private void LoadFile(InputFileChangeEventArgs e) { /* ... Same logic ... */ _userFeedbackMessage = null; selectedFile = null; if (e.FileCount > 0) { selectedFile = e.GetMultipleFiles(1).FirstOrDefault(); } }

    // --- MODIFIED HandleAdminUpload to use Placeholder ID ---
    private async Task HandleAdminUpload()
    {
        if (selectedFile == null) { /*...*/ return; }
        if (isUploading) { return; }

        isUploading = true; _userFeedbackMessage = null; _feedbackSuccess = false;
        await InvokeAsync(StateHasChanged);

        // --- Use Placeholder Admin ID ---
        var uploaderUserId = PlaceholderAdminId;
        Logger.LogWarning("DEMO MODE: Using Placeholder Admin ID for upload: {PlaceholderAdminId}", uploaderUserId);
        // --- End Placeholder Use ---

        // ... (File Validation unchanged) ...
        long maxFileSizeMB = Configuration.GetValue<long>("FileUploadSettings:MaxFileSizeMB", 20); long maxFileSize = maxFileSizeMB * 1024 * 1024; if (selectedFile.Size == 0 || selectedFile.Size > maxFileSize) { _userFeedbackMessage = $"Error: File is empty or exceeds {maxFileSizeMB} MB limit."; _feedbackSuccess = false; NotificationService.Notify(NotificationSeverity.Error, "File Size Error", _userFeedbackMessage); isUploading = false; selectedFile = null; await InvokeAsync(StateHasChanged); return; }

        // ... (File Saving & DB Record logic unchanged, uses uploaderUserId variable) ...
        string uniqueFileName = $"{Guid.NewGuid()}{Path.GetExtension(selectedFile.Name)}"; string baseUploadPath = Configuration["FileUploadSettings:BasePath"] ?? string.Empty; if (string.IsNullOrEmpty(baseUploadPath)) { Logger.LogError("FileUploadSettings:BasePath not configured."); _userFeedbackMessage = "Server config error: Upload path missing."; _feedbackSuccess = false; NotificationService.Notify(NotificationSeverity.Error, "Config Error", "Upload path not set."); isUploading = false; await InvokeAsync(StateHasChanged); return; }
        string customerDirectory = Path.Combine(baseUploadPath, CustomerId); string fullFilePath = Path.Combine(customerDirectory, uniqueFileName); string? savedFilePath = null; try { Directory.CreateDirectory(customerDirectory); Logger.LogInformation("Admin Upload: Saving file for Customer {CustomerId} to {Path} by Uploader {UploaderId}", CustomerId, fullFilePath, uploaderUserId); await using FileStream fs = new(fullFilePath, FileMode.Create); using var stream = selectedFile.OpenReadStream(maxFileSize); await stream.CopyToAsync(fs); savedFilePath = fullFilePath; Logger.LogInformation("File saved: {Path}", fullFilePath); var newDocument = new CustomerDocument { OriginalFileName = selectedFile.Name, StoredFileName = uniqueFileName, ContentType = selectedFile.ContentType, FileSize = selectedFile.Size, UploadTimestamp = DateTime.UtcNow, TargetUserId = CustomerId, UploadedById = uploaderUserId, Description = adminUploadModel.Description?.Trim(), IsDeleted = false }; DbContext.CustomerDocuments.Add(newDocument); await DbContext.SaveChangesAsync(); Logger.LogInformation("DB record created for admin upload: ID {DocId}", newDocument.Id); _feedbackSuccess = true; _userFeedbackMessage = $"File '{selectedFile.Name}' uploaded successfully."; NotificationService.Notify(NotificationSeverity.Success, "Upload Successful", _userFeedbackMessage); selectedFile = null; adminUploadModel = new UploadModel(); await LoadCustomerData(); } catch (IOException ioEx) { Logger.LogError(ioEx, "IO Error during admin upload for Customer {CustomerId}", CustomerId); _feedbackSuccess = false; _userFeedbackMessage = $"Error saving file: {ioEx.Message}"; NotificationService.Notify(NotificationSeverity.Error, "File Error", "Could not save file."); } catch (DbUpdateException dbEx) { Logger.LogError(dbEx, "DB Error during admin upload for Customer {CustomerId}", CustomerId); _feedbackSuccess = false; _userFeedbackMessage = $"Error saving record: {dbEx.InnerException?.Message ?? dbEx.Message}"; NotificationService.Notify(NotificationSeverity.Error, "DB Error", "Could not save database record."); TryDeleteFile(savedFilePath); } catch (Exception ex) { Logger.LogError(ex, "Generic Error during admin upload for Customer {CustomerId}", CustomerId); _feedbackSuccess = false; _userFeedbackMessage = $"An unexpected error occurred: {ex.Message}"; NotificationService.Notify(NotificationSeverity.Error, "Error", "Upload failed unexpectedly."); TryDeleteFile(savedFilePath); } finally { isUploading = false; await InvokeAsync(StateHasChanged); }
    }

    // Helper cleanup function...
    private void TryDeleteFile(string? filePath) { /* ... Same logic ... */ if (filePath != null && File.Exists(filePath)) { try { File.Delete(filePath); Logger.LogWarning("Cleaned up file '{FilePath}' due to upload error.", filePath); } catch (Exception delEx) { Logger.LogError(delEx, "Failed to clean up file '{FilePath}' after upload error.", filePath); } } }
}