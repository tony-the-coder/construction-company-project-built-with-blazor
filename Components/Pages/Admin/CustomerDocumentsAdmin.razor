@page "/admin/customer-documents/{CustomerId}"



@using Microsoft.AspNetCore.Authorization
@layout AdminLayout // Use the admin layout
@* @attribute [Authorize(Roles = "Admin")] *@

@inject ApplicationDbContext DbContext
@inject ILogger<CustomerDocumentsAdmin> Logger  
@inject NavigationManager NavigationManager
@inject DialogService DialogService 
@inject IConfiguration Configuration

@using LehmanCustomConstruction.Data  
@using LehmanCustomConstruction.Data.Common  
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Radzen // For DialogService
@using Radzen.Blazor 

<PageTitle>Manage Documents for Customer</PageTitle>

@if (_isLoading)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
    <p><em>Loading customer details...</em></p>
}
else if (_customer == null)
{
    <div class="rz-card card rz-shadow-3 rz-my-12" style="padding: 2rem;">
        <div class="rz-text-danger rz-text-align-center rz-display-flex rz-align-items-center rz-justify-content-center">
            <RadzenIcon Icon="error_outline" Style="font-size: 2rem; margin-right: 0.5rem;" />
            <span class="rz-text-h6">Error: Customer with ID '@CustomerId' not found.</span>
        </div>
        <div class="rz-text-align-center rz-mt-4">
            <RadzenButton Click='() => NavigationManager.NavigateTo("/admin/customers")' Text="Back to Customers" Icon="arrow_back" ButtonStyle="ButtonStyle.Secondary" />
        </div>
    </div>
}
else
{
    <h3 class="text-2xl font-semibold text-primary mb-2 font-serif">Manage Documents for: @_customer.UserName</h3>
    <p class="text-secondary mb-6">ID: @_customer.Id | Email: @_customer.Email</p>

    @* --- Admin Upload Section (Placeholder) --- *@
    <div class="bg-white border border-subtle rounded-lg shadow-sm p-6 mb-8">
        <h4 class="text-xl font-semibold text-primary mb-4 font-serif">Upload Document for Customer</h4>
        @* TODO: Add an upload component here - similar to Document_demo.razor *@
        @* Ensure TargetUserId is set to CustomerId and potentially track Admin Uploader ID *@
        <p class="text-secondary italic">Admin upload functionality coming soon...</p>
        @* --- Display Upload/Delete Messages --- *@
        @if (!string.IsNullOrEmpty(_userFeedbackMessage))
        {
            <div class="@(_feedbackSuccess ? "mt-4 bg-green-100 border border-green-400 text-green-700" : "mt-4 bg-red-100 border border-red-400 text-red-700") px-4 py-3 rounded relative" role="alert">
                <span class="block sm:inline">@_userFeedbackMessage</span>
            </div>
        }
    </div>
    @* --- End Admin Upload Section --- *@


    @* --- Existing Documents Grid --- *@
    <div class="bg-white border border-subtle rounded-lg shadow-sm p-6">
        <h4 class="text-xl font-semibold text-primary mb-4 font-serif">Active Documents</h4>

        <RadzenDataGrid Data="@_documents" TItem="CustomerDocument" AllowSorting="true" AllowPaging="true" PageSize="10"
                        PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        Density="Density.Compact" Style="width: 100%;" EmptyText="No active documents found for this customer." IsLoading="@_isLoadingDocuments">
            <Columns>
                <RadzenDataGridColumn TItem="CustomerDocument" Property="OriginalFileName" Title="File Name" Width="250px" />

                <RadzenDataGridColumn TItem="CustomerDocument" Property="UploadTimestamp" Title="Uploaded On" FormatString="{0:yyyy-MM-dd HH:mm}" Width="160px" TextAlign="TextAlign.Center" />

                <RadzenDataGridColumn TItem="CustomerDocument" Title="Size" Property="FileSize" Sortable="true" Filterable="false" Width="100px" TextAlign="TextAlign.Right">
                    <Template Context="doc">
                        @FormatFileSize(doc.FileSize)
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="CustomerDocument" Property="Description" Title="Description" Width="200px" />

                <RadzenDataGridColumn TItem="CustomerDocument" Title="Actions" Sortable="false" Filterable="false" Width="150px" TextAlign="TextAlign.Center">
                    <Template Context="doc">
                        @* Direct Download Link (using configured endpoint) *@
                        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="download" Size="ButtonSize.Small"
                                      Click=@(() => NavigationManager.NavigateTo($"/download/{doc.Id}", forceLoad: true)) Text="Download" class="rz-mr-1" />

                        @* Soft Delete Button *@
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small"
                                      Click=@(args => ConfirmDeleteDocument(doc)) Text="Delete" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
}


@code {
    [Parameter]
    public string CustomerId { get; set; } = string.Empty;

    private ApplicationUser? _customer;
    private List<CustomerDocument>? _documents;
    private bool _isLoading = true; // For overall page load
    private bool _isLoadingDocuments = false; // Specifically for grid refresh

    // --- Feedback Messages (for upload/delete) ---
    private string? _userFeedbackMessage;
    private bool _feedbackSuccess;

    protected override async Task OnParametersSetAsync()
    {
        await LoadCustomerData();
    }

    // --- MODIFIED LoadCustomerData TO FILTER DELETED ---
    private async Task LoadCustomerData()
    {
        _isLoading = true;
        _isLoadingDocuments = true;
        _userFeedbackMessage = null; // Clear previous messages on load
        if (string.IsNullOrEmpty(CustomerId))
        {
            Logger.LogWarning("Customer ID parameter is missing.");
            _customer = null;
            _isLoading = false;
            _isLoadingDocuments = false;
            return;
        }

        try
        {
            _customer = await DbContext.Users.FirstOrDefaultAsync(u => u.Id == CustomerId);

            if (_customer != null)
            {
                // Fetch documents where this customer is the target AND IsDeleted is false
                _documents = await DbContext.CustomerDocuments
                                            .Where(d => d.TargetUserId == CustomerId && !d.IsDeleted) // <<< FILTER ADDED HERE <<<
                                            .OrderByDescending(d => d.UploadTimestamp)
                                            .AsNoTracking()
                                            .ToListAsync();
                Logger.LogInformation("Loaded details and {DocCount} non-deleted documents for customer {CustomerId}", _documents?.Count ?? 0, CustomerId);
            }
            else
            {
                Logger.LogWarning("Customer with ID {CustomerId} not found in the database.", CustomerId);
                _documents = new List<CustomerDocument>(); // Initialize empty list
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading data for customer {CustomerId}", CustomerId);
            _customer = null;
            _documents = null; // Set to null on error
            _userFeedbackMessage = "Error loading customer data.";
            _feedbackSuccess = false;
        }
        finally
        {
            _isLoading = false;
            _isLoadingDocuments = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private string FormatFileSize(long bytes)
    {
        const long kilobyte = 1024; const long megabyte = kilobyte * 1024; const long gigabyte = megabyte * 1024;
        if (bytes < 0) return "Invalid size"; if (bytes == 0) return "0 B";
        if (bytes < kilobyte) return $"{bytes} B"; if (bytes < megabyte) return $"{(double)bytes / kilobyte:F1} KB";
        if (bytes < gigabyte) return $"{(double)bytes / megabyte:F1} MB"; return $"{(double)bytes / gigabyte:F1} GB";
    }

    // --- Document Deletion Logic ---
    private async Task ConfirmDeleteDocument(CustomerDocument docToDelete)
    {
        if (docToDelete == null) return;

        var result = await DialogService.Confirm(
            $"Are you sure you want to delete the file '{docToDelete.OriginalFileName}'? This action cannot be undone easily.", // Updated message
            "Confirm Deletion",
            new ConfirmOptions() { OkButtonText = "Yes, Delete", CancelButtonText = "Cancel" });

        if (result == true) // User confirmed
        {
            await DeleteDocument(docToDelete);
        }
    }

    // --- MODIFIED DeleteDocument FOR SOFT DELETE ---
    private async Task DeleteDocument(CustomerDocument docToDelete)
    {
        _isLoadingDocuments = true; // Show loading state on grid
        _userFeedbackMessage = null; // Clear previous message
        _feedbackSuccess = false; // Default to failure
        await InvokeAsync(StateHasChanged);

        try
        {
            // 1. Find the document record in the context
            // Use FindAsync which checks tracked entities first, then queries DB
            var trackedDoc = await DbContext.CustomerDocuments.FindAsync(docToDelete.Id);
            if (trackedDoc == null)
            {
                Logger.LogWarning("Attempted to delete document ID {DocumentId} but it was not found in DB.", docToDelete.Id);
                _userFeedbackMessage = "Error: Document not found.";
                return; // Exit early
            }

            // Optional: Check if already marked as deleted
            if (trackedDoc.IsDeleted)
            {
                Logger.LogInformation("Document ID {DocumentId} is already marked as deleted.", trackedDoc.Id);
                _userFeedbackMessage = $"Document '{trackedDoc.OriginalFileName}' was already deleted.";
                _feedbackSuccess = true; // Indicate success as the state is already achieved
                return; // Exit early
            }

            // 2. Construct the file path
            string baseDir = Configuration["FileUploadSettings:BasePath"] ?? string.Empty;
            if (string.IsNullOrEmpty(baseDir))
            {
                Logger.LogError("FileUploadSettings:BasePath is not configured in appsettings.json.");
                _userFeedbackMessage = "Server configuration error: File path not set.";
                return; // Cannot proceed without base path
            }
            // Ensure TargetUserId is not null before combining paths
            string targetUserId = trackedDoc.TargetUserId ?? string.Empty;
            if (string.IsNullOrEmpty(targetUserId))
            {
                Logger.LogError("Document ID {DocumentId} has a missing or empty TargetUserId.", trackedDoc.Id);
                _userFeedbackMessage = "Error: Document record is corrupted (missing target user ID).";
                return;
            }
            string userDir = Path.Combine(baseDir, targetUserId);
            string filePath = Path.Combine(userDir, trackedDoc.StoredFileName);

            // 3. Mark the record as deleted in the database (SOFT DELETE)
            trackedDoc.IsDeleted = true; // <<< SET THE SOFT DELETE FLAG <<<
            // Optional: Set a deleted timestamp if you added that property
            // trackedDoc.DeletedTimestamp = DateTime.UtcNow;
            await DbContext.SaveChangesAsync(); // <<< SAVE THE CHANGE (IsDeleted = true)
            Logger.LogInformation("Successfully marked document as deleted in database for ID {DocumentId}, File: {FileName}", trackedDoc.Id, trackedDoc.OriginalFileName);

            // 4. Delete the physical file (Optional - decide if you want to keep files for soft-deleted records)
            // If you *want* to keep files for recovery, comment out or remove this section.
            // Current implementation DELETES the file.
            if (File.Exists(filePath))
            {
                try
                {
                    File.Delete(filePath);
                    Logger.LogInformation("Successfully deleted physical file: {FilePath}", filePath);
                    _userFeedbackMessage = $"Document '{trackedDoc.OriginalFileName}' deleted successfully."; // Set success message here
                    _feedbackSuccess = true;
                }
                catch (IOException ioEx)
                {
                    // Log failure to delete file but continue as DB record is marked deleted
                    Logger.LogError(ioEx, "Error deleting physical file after soft delete: {FilePath}. DB record remains marked as deleted.", filePath);
                    // Provide specific feedback for this scenario
                    _userFeedbackMessage = $"Document '{trackedDoc.OriginalFileName}' marked as deleted, but the physical file could not be removed. Please check server logs or permissions.";
                    _feedbackSuccess = false; // Indicate partial failure
                }
            }
            else
            {
                Logger.LogWarning("Physical file not found during deletion (after soft delete): {FilePath}. Marking operation as successful as DB record is updated.", filePath);
                // If DB update was successful, we consider the operation mostly successful
                _userFeedbackMessage = $"Document '{trackedDoc.OriginalFileName}' deleted successfully (physical file was already missing).";
                _feedbackSuccess = true;
            }

            // 5. Refresh the list (re-query to remove the item from the grid)
            await LoadCustomerData(); // Reload filtered data

        }
        catch (DbUpdateException dbEx) // Catch specific DB errors
        {
            Logger.LogError(dbEx, "Database error while soft deleting document ID {DocumentId}", docToDelete.Id);
            _userFeedbackMessage = $"Database error deleting document. See logs for details.";
            _feedbackSuccess = false;
        }
        catch (Exception ex) // Catch other unexpected errors
        {
            Logger.LogError(ex, "Error soft deleting document ID {DocumentId}", docToDelete.Id);
            _userFeedbackMessage = $"An unexpected error occurred while deleting the document: {ex.Message}";
            _feedbackSuccess = false;
        }
        finally
        {
            _isLoadingDocuments = false; // Hide loading state
            await InvokeAsync(StateHasChanged); // Ensure UI updates with feedback message
        }
    }

    // --- TODO: Add methods for Admin Uploading documents ---
    // Need properties for binding, InputFile component, and an upload handler method.
}