@* File: Components/Pages/Admin/CustomerDocumentsAdmin.razor *@
@page "/admin/customer-documents/{CustomerId}"
@layout AdminLayout
@rendermode InteractiveServer

@* --- AUTHORIZATION TEMPORARILY DISABLED FOR DEMO --- *@
@* @attribute [Authorize(Roles = "Admin")] *@
@* --- REMEMBER TO RE-ENABLE AUTHORIZATION AFTER DEMO --- *@

@* Using Statements *@
@using System.ComponentModel.DataAnnotations
@using System.IO
@using LehmanCustomConstruction.Data
@using LehmanCustomConstruction.Data.Common
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Logging
@using Radzen
@using Radzen.Blazor
@*@using Microsoft.AspNetCore.Authorization*@
@using LehmanCustomConstruction.Components.Shared

@* Service Injections *@
@inject ApplicationDbContext DbContext
@inject ILogger<CustomerDocumentsAdmin> Logger
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject IConfiguration Configuration
@inject NotificationService NotificationService

<PageTitle>Manage Documents for Customer</PageTitle>

@* --- Loading and Error States --- *@
@if (_isLoading)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
    <p><em>Loading...</em></p>
}
else if (_customer == null)
{
     <div class="rz-card card rz-shadow-3 rz-my-12" style="padding: 2rem;">
        <div class="rz-text-danger rz-text-align-center rz-display-flex rz-align-items-center rz-justify-content-center">
            <RadzenIcon Icon="error_outline" Style="font-size: 2rem; margin-right: 0.5rem;" />
            <span class="rz-text-h6">Error: Customer with ID '@CustomerId' not found.</span>
        </div>
        <div class="rz-text-align-center rz-mt-4">
             <RadzenButton Click='() => NavigationManager.NavigateTo("/admin/customers")' Text="Back to Customers" Icon="arrow_back" ButtonStyle="ButtonStyle.Secondary" />
        </div>
    </div>
}
else
{
    @* --- Customer Header --- *@
    <h3 class="text-2xl font-semibold text-primary dark:text-gray-100 mb-2 font-serif">Manage Documents for: @_customer.UserName</h3>
    <p class="text-secondary dark:text-gray-400 mb-6">ID: @_customer.Id | Email: @_customer.Email</p>

    @* --- Admin Upload Section --- *@
    @* Using the reusable component *@
    <FileUploadComponent TargetUserId="@CustomerId"
                         UploaderUserId="@PlaceholderAdminId"  
                         AllowMultipleFiles="true"
                         AllowDescription="true"  
                         Title="Upload Document(s) for Customer"
                         UploadButtonText="Upload Selected Files"
                         CssClass="mb-8"
                         IsInDemoMode="true"  
                         OnUploadComplete="@HandleUploadCompletion"
                         OnUploadError="@HandleUploadError" />

    @* --- Existing Documents Grid --- *@
    <div class="bg-white dark:bg-gray-800 border border-subtle dark:border-gray-700 rounded-lg shadow-sm p-6">
        <h4 class="text-xl font-semibold text-primary dark:text-gray-100 mb-4 font-serif">Active Documents</h4>
        <RadzenDataGrid Data="@_documents" TItem="CustomerDocument" AllowSorting="true" AllowPaging="true" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Density="Density.Compact" Style="width: 100%;" EmptyText="No active documents found for this customer." IsLoading="@_isLoadingDocuments" PagerAlwaysVisible="true" PageSizeOptions="new int[] { 5, 10, 20, 50 }">
            <Columns>
                <!-- Grid Columns -->
                 <RadzenDataGridColumn TItem="CustomerDocument" Property="OriginalFileName" Title="File Name" Width="250px" />
                 <RadzenDataGridColumn TItem="CustomerDocument" Property="UploadTimestamp" Title="Uploaded On" FormatString="{0:yyyy-MM-dd HH:mm}" Width="160px" TextAlign="TextAlign.Center" />
                 <RadzenDataGridColumn TItem="CustomerDocument" Title="Size" Property="FileSize" Sortable="true" Filterable="false" Width="100px" TextAlign="TextAlign.Right"><Template Context="doc"> @FormatFileSize(doc.FileSize) </Template></RadzenDataGridColumn>
                 <RadzenDataGridColumn TItem="CustomerDocument" Property="Description" Title="Description" Width="200px" />
                 <RadzenDataGridColumn TItem="CustomerDocument" Title="Uploaded By ID" Property="UploadedById" Width="150px" Visible="true"><Template Context="doc"> <span class="text-xs text-secondary dark:text-gray-400">@doc.UploadedById</span> </Template></RadzenDataGridColumn>
                 <RadzenDataGridColumn TItem="CustomerDocument" Title="Actions" Sortable="false" Filterable="false" Width="160px" TextAlign="TextAlign.Center">
                     <Template Context="doc">
                         <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="download" Size="ButtonSize.Small" Click=@(() => NavigationManager.NavigateTo($"/download/{doc.Id}", forceLoad: true)) class="rz-mr-1" />
                         <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Click=@(args => ConfirmDeleteDocument(doc)) />
                     </Template>
                 </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
}

@code {
    [Parameter]
    public string CustomerId { get; set; } = string.Empty;

    // State Variables...
    private ApplicationUser? _customer;
    private List<CustomerDocument>? _documents; // This holds the data for the grid
    private bool _isLoading = true;
    private bool _isLoadingDocuments = false;

    // --- Placeholder Admin ID ---
    private const string PlaceholderAdminId = "683a96be-9b4a-4af7-a863-b98a88815cae"; // Using test4@test.com ID

    // --- REMOVED OLD UPLOAD VARIABLES ---

    // Lifecycle Methods...
    protected override async Task OnParametersSetAsync() { await LoadCustomerData(); }

    // Data Loading (Ensure _documents is updated)...
    private async Task LoadCustomerData() { _isLoading = true; _isLoadingDocuments = true; await InvokeAsync(StateHasChanged); if (string.IsNullOrEmpty(CustomerId)) { _isLoading = false; _isLoadingDocuments = false; /* Handle error */ await InvokeAsync(StateHasChanged); return; } try { _customer = await DbContext.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == CustomerId); if (_customer != null) { _documents = await DbContext.CustomerDocuments.Where(d => d.TargetUserId == CustomerId && !d.IsDeleted).OrderByDescending(d => d.UploadTimestamp).AsNoTracking().ToListAsync(); Logger.LogInformation("Loaded {DocCount} non-deleted docs for customer {CustomerId}", _documents?.Count ?? 0, CustomerId); } else { Logger.LogWarning("Customer {CustomerId} not found.", CustomerId); _documents = new List<CustomerDocument>(); } } catch (Exception ex) { Logger.LogError(ex, "Error loading data for customer {CustomerId}", CustomerId); NotificationService.Notify(NotificationSeverity.Error, "Load Error", $"Failed to load data: {ex.Message}"); _customer = null; _documents = null; } finally { _isLoading = false; _isLoadingDocuments = false; await InvokeAsync(StateHasChanged); } }

    // File Size Formatting...
    private string FormatFileSize(long bytes) { const long k = 1024, m = k * k, g = m * k; if (bytes < 0) return "?"; if (bytes == 0) return "0 B"; if (bytes < k) return $"{bytes} B"; if (bytes < m) return $"{(double)bytes / k:F1} KB"; if (bytes < g) return $"{(double)bytes / m:F1} MB"; return $"{(double)bytes / g:F1} GB"; }

    // Delete Logic (Soft Delete)...
    private async Task ConfirmDeleteDocument(CustomerDocument docToDelete) { if (docToDelete == null) return; var confirmed = await DialogService.Confirm($"Mark '{docToDelete.OriginalFileName}' as deleted?", "Confirm Deletion", new ConfirmOptions { OkButtonText = "Yes, Mark Deleted", CancelButtonText = "No, Cancel" }); if (confirmed == true) { await DeleteDocument(docToDelete); } }
    private async Task DeleteDocument(CustomerDocument docToDelete) { _isLoadingDocuments = true; await InvokeAsync(StateHasChanged); try { var trackedDoc = await DbContext.CustomerDocuments.FindAsync(docToDelete.Id); if (trackedDoc == null) { Logger.LogWarning("Soft Delete failed: Doc ID {DocId} not found.", docToDelete.Id); NotificationService.Notify(NotificationSeverity.Error, "Delete Error", "Document not found."); return; } if (trackedDoc.IsDeleted) { Logger.LogInformation("Doc ID {DocId} already soft-deleted.", trackedDoc.Id); NotificationService.Notify(NotificationSeverity.Info, "Already Deleted", "Document was already marked as deleted."); return; } trackedDoc.IsDeleted = true; await DbContext.SaveChangesAsync(); Logger.LogInformation("DB record soft-deleted for doc ID {DocId}", trackedDoc.Id); NotificationService.Notify(NotificationSeverity.Success, "Success", $"Document '{trackedDoc.OriginalFileName}' marked as deleted."); await LoadCustomerData(); } catch (DbUpdateException dbEx) { Logger.LogError(dbEx, "DB error during soft delete for doc ID {DocId}", docToDelete.Id); NotificationService.Notify(NotificationSeverity.Error,"DB Delete Error", $"Database error: {dbEx.InnerException?.Message ?? dbEx.Message}"); } catch (Exception ex) { Logger.LogError(ex, "Error during soft delete for doc ID {DocId}", docToDelete.Id); NotificationService.Notify(NotificationSeverity.Error,"Delete Error", $"An unexpected error occurred: {ex.Message}"); } finally { _isLoadingDocuments = false; await InvokeAsync(StateHasChanged); } }

    // --- Component Event Handlers ---
    private async Task HandleUploadCompletion(List<CustomerDocument> savedDocs)
    {
        Logger.LogInformation("Admin page received {Count} uploaded documents for customer {CustomerId}.", savedDocs.Count, CustomerId);
        await LoadCustomerData(); // Refresh the grid
        await InvokeAsync(StateHasChanged); // Ensure UI update
    }

    private void HandleUploadError(string errorMessage)
    {
        Logger.LogError("Admin page received upload error for customer {CustomerId}: {Error}", CustomerId, errorMessage);
        // Notification already shown by component
    }
}