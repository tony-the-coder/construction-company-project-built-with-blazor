@page "/admin/blog" 
@layout AdminLayout 

@using LehmanCustomConstruction.Data.Blogs
@using LehmanCustomConstruction.Data.Blogs.Interfaces
@using Radzen 

@inject IBlogPostRepository BlogPostRepository
@inject NavigationManager NavigationManager
@inject Radzen.DialogService DialogService
@inject Radzen.NotificationService NotificationService 

<h3 class="text-2xl font-semibold text-primary dark:text-gray-100 mb-6 font-serif">Manage Blog Posts</h3>

<div class="mb-6">
    <a href="/admin/blog/edit" 
       class="inline-flex items-center px-4 py-2 bg-accent border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-accent focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition ease-in-out duration-150">
        Create New Post
    </a>
</div>

@if (_isLoading && blogPosts == null) @* Show loading only on initial load *@
{
    <p class="text-secondary dark:text-gray-400"><em>Loading posts...</em></p>
}
else if (blogPosts == null || !blogPosts.Any())
{
    <p class="text-secondary dark:text-gray-400"><em>No blog posts found. <a href="/admin/blog/edit" class="text-accent hover:underline">Create one!</a></em></p>
}
else
{
    <div class="shadow overflow-hidden border border-subtle dark:border-gray-700 sm:rounded-lg"> 
        <table class="min-w-full divide-y divide-subtle dark:divide-gray-700">
            <thead class="bg-gray-50 dark:bg-gray-800"> 
                <tr>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-secondary uppercase tracking-wider dark:text-gray-400">
                        Title
                    </th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-secondary uppercase tracking-wider dark:text-gray-400">
                        Author
                    </th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-secondary uppercase tracking-wider dark:text-gray-400">
                        Published Date
                    </th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-secondary uppercase tracking-wider dark:text-gray-400">
                        Status
                    </th>
                    <th scope="col" class="relative px-6 py-3">
                        <span class="sr-only">Actions</span>
                    </th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-subtle dark:bg-gray-900 dark:divide-gray-700">
                @foreach (var post in blogPosts)
                {
                    <tr>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-primary dark:text-white">
                            @post.Title
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-secondary dark:text-gray-400">
                            @post.Author
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-secondary dark:text-gray-400">
                            @post.PublishDate.ToString("yyyy-MM-dd") 
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm">
                            @if (post.IsPublished)
                            {
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                                    Published
                                </span>
                            }
                            else
                            {
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
                                    Draft
                                </span>
                            }
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-3"> 
                            <a href="@($"/admin/blog/edit/{post.ID}")" class="text-accent hover:underline dark:text-accent">Edit</a>
                            <button type="button" @onclick="() => ConfirmDelete(post)" class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300">Delete</button> 
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private IEnumerable<BlogPost>? blogPosts;
    private bool _isLoading = true; 

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        _isLoading = true; 
        try
        {
            blogPosts = (await BlogPostRepository.GetAllAsync()).ToList(); 
        }
        catch (Exception ex)
        {
             NotificationService.Notify(NotificationSeverity.Error, "Load Error", $"Failed to load blog posts: {ex.Message}");
             blogPosts = Enumerable.Empty<BlogPost>(); 
        }
        finally
        {
             _isLoading = false; 
             // StateHasChanged needed if LoadPosts is called outside of lifecycle methods (like after delete)
             // Not strictly necessary here, but doesn't hurt.
             StateHasChanged(); 
        }
    }

    private async Task ConfirmDelete(BlogPost postToDelete)
    {
        var confirmed = await DialogService.Confirm(
            $"Are you sure you want to delete the post '{postToDelete.Title}'?",
            "Confirm Deletion",
            new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" }
        );

        if (confirmed == true)
        {
            _isLoading = true; 
            StateHasChanged();
            bool deleted = false;
            try
            {
                deleted = await BlogPostRepository.DeleteAsync(postToDelete.ID);
                if (deleted)
                {
                    NotificationService.Notify(NotificationSeverity.Success, "Success", "Post deleted successfully.");
                    await LoadPosts(); // Refresh the list
                }
                else
                {
                    NotificationService.Notify(NotificationSeverity.Warning, "Deletion Failed", $"Could not delete post '{postToDelete.Title}'.");
                }
            }
            catch (Exception ex)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Deletion Error", $"Error deleting post: {ex.Message}");
            }
            finally
            {
                _isLoading = false;
                StateHasChanged(); // Ensure UI updates after delete attempt
            }
        }
    }
}