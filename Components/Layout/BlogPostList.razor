@page "/admin/blog" // Or "/admin/manage-blog-posts" to match your layout link
@layout AdminLayout // Use the admin layout we just discussed

@using LehmanCustomConstruction.Data.Blogs
@using LehmanCustomConstruction.Data.Blogs.Interfaces
@inject IBlogPostRepository BlogPostRepository
@inject NavigationManager NavigationManager
@inject Radzen.DialogService DialogService // For confirmation dialogs

<h3>Manage Blog Posts</h3>

<div class="mb-4">
    <a href="/admin/blog/edit" class="inline-flex items-center px-4 py-2 bg-indigo-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-indigo-700 active:bg-indigo-900 focus:outline-none focus:border-indigo-900 focus:ring focus:ring-indigo-300 disabled:opacity-25 transition dark:bg-indigo-500 dark:hover:bg-indigo-600">
        Create New Post
    </a>
</div>

@if (blogPosts == null)
{
    <p><em>Loading posts...</em></p> @* Or use a spinner component *@
}
else if (!blogPosts.Any())
{
    <p><em>No blog posts found. <a href="/admin/blog/edit">Create one!</a></em></p>
}
else
{
    <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700 shadow overflow-hidden sm:rounded-lg">
        <thead class="bg-gray-50 dark:bg-gray-800">
            <tr>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400">
                    Title
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400">
                    Author
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400">
                    Published Date
                </th>
                <th scope="col" class="relative px-6 py-3">
                    <span class="sr-only">Actions</span>
                </th>
            </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200 dark:bg-gray-900 dark:divide-gray-700">
            @foreach (var post in blogPosts)
            {
                <tr>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
                        @post.Title
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                        @post.Author
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                        @post.PublishDate.ToString("yyyy-MM-dd") @* Format date as needed *@
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2">
                        <a href="@($"/admin/blog/edit/{post.ID}")" class="text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-300">Edit</a>
                        <button @onclick="() => ConfirmDelete(post)" class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private IEnumerable<BlogPost>? blogPosts;

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        blogPosts = await BlogPostRepository.GetAllAsync();
        StateHasChanged(); // Ensure UI updates if loading takes time
    }

    private async Task ConfirmDelete(BlogPost postToDelete)
    {
        var confirmed = await DialogService.Confirm($"Are you sure you want to delete the post '{postToDelete.Title}'?", "Confirm Deletion", new Radzen.ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });

        if (confirmed == true)
        {
            bool deleted = await BlogPostRepository.DeleteAsync(postToDelete.ID);
            if (deleted)
            {
                // Refresh the list after deletion
                await LoadPosts();
                // Optional: Show success notification
                // await DialogService.Alert("Post deleted successfully.", "Success");
            }
            else
            {
                await DialogService.Alert($"Error deleting post '{postToDelete.Title}'. It might have already been deleted.", "Deletion Error");
            }
        }
    }
}