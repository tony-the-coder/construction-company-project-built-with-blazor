@page "/admin/blog" 
@layout AdminLayout 

@* Necessary using statements *@
@using LehmanCustomConstruction.Data.Blogs
@using LehmanCustomConstruction.Data.Blogs.Interfaces
@using Radzen @* Needed for DialogService & ConfirmOptions *@

@* Inject required services *@
@inject IBlogPostRepository BlogPostRepository
@inject NavigationManager NavigationManager
@inject Radzen.DialogService DialogService
@inject Radzen.NotificationService NotificationService 


<h3 class="text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-4">Manage Blog Posts</h3>

@* Button to navigate to the create/edit page *@
<div class="mb-4">
    <a href="/admin/blog/edit" class="inline-flex items-center px-4 py-2 bg-indigo-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-indigo-700 active:bg-indigo-900 focus:outline-none focus:border-indigo-900 focus:ring focus:ring-indigo-300 disabled:opacity-25 transition dark:bg-indigo-500 dark:hover:bg-indigo-600">
        Create New Post
    </a>
</div>

@* Loading indicator *@
@if (blogPosts == null)
{
    <p class="text-gray-600 dark:text-gray-400"><em>Loading posts...</em></p>
}
@* Message if no posts exist *@
else if (!blogPosts.Any())
{
    <p class="text-gray-600 dark:text-gray-400"><em>No blog posts found. <a href="/admin/blog/edit" class="text-indigo-600 hover:text-indigo-800 dark:text-indigo-400 dark:hover:text-indigo-300">Create one!</a></em></p>
}
@* Display the table if posts exist *@
else
{
    <div class="shadow overflow-hidden border-b border-gray-200 dark:border-gray-700 sm:rounded-lg"> @* Added container div for better shadow/rounding *@
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead class="bg-gray-50 dark:bg-gray-800">
                <tr>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400">
                        Title
                    </th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400">
                        Author
                    </th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400">
                        Published Date
                    </th>
                    @* --- ADDED: Status Column Header --- *@
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400">
                        Status
                    </th>
                    @* ---------------------------------- *@
                    <th scope="col" class="relative px-6 py-3">
                        <span class="sr-only">Actions</span>
                    </th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200 dark:bg-gray-900 dark:divide-gray-700">
                @foreach (var post in blogPosts)
                {
                    <tr>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
                            @post.Title
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                            @post.Author
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                            @post.PublishDate.ToString("yyyy-MM-dd") @* Format date as needed *@
                        </td>
                        @* --- ADDED: Status Column Data Cell --- *@
                        <td class="px-6 py-4 whitespace-nowrap text-sm">
                            @if (post.IsPublished)
                            {
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                                    Published
                                </span>
                            }
                            else
                            {
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
                                    Draft
                                </span>
                            }
                        </td>
                        @* ---------------------------------- *@
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2">
                            <a href="@($"/admin/blog/edit/{post.ID}")" class="text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-300">Edit</a>
                            <button type="button" @onclick="() => ConfirmDelete(post)" class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300">Delete</button> @* Added type="button" *@
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {
    private IEnumerable<BlogPost>? blogPosts;
    private bool _isLoading = true; // Added loading flag

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        _isLoading = true; // Set loading state
        blogPosts = null; // Clear existing posts while loading
        try
        {
            // Ensure this gets ALL posts (published and drafts) for the admin view
            blogPosts = await BlogPostRepository.GetAllAsync();
        }
        catch (Exception ex)
        {
             NotificationService.Notify(NotificationSeverity.Error, "Load Error", $"Failed to load blog posts: {ex.Message}");
             blogPosts = Enumerable.Empty<BlogPost>(); // Prevent null reference
        }
        finally
        {
             _isLoading = false; // Clear loading state
             StateHasChanged(); // Ensure UI updates
        }
    }

    private async Task ConfirmDelete(BlogPost postToDelete)
    {
        // Use Radzen DialogService for confirmation
        var confirmed = await DialogService.Confirm(
            $"Are you sure you want to delete the post '{postToDelete.Title}'?",
            "Confirm Deletion",
            new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" }
        );

        if (confirmed == true)
        {
            _isLoading = true; // Show loading during delete
            StateHasChanged();
            bool deleted = false;
            try
            {
                deleted = await BlogPostRepository.DeleteAsync(postToDelete.ID);
                if (deleted)
                {
                    NotificationService.Notify(NotificationSeverity.Success, "Success", "Post deleted successfully.");
                    await LoadPosts(); // Refresh the list after deletion
                }
                else
                {
                    NotificationService.Notify(NotificationSeverity.Warning, "Deletion Failed", $"Could not delete post '{postToDelete.Title}'. It might have already been deleted.");
                }
            }
            catch (Exception ex)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Deletion Error", $"Error deleting post: {ex.Message}");
            }
            finally
            {
                _isLoading = false;
                StateHasChanged();
            }
        }
    }
}